{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"M2 Tutorials Homepage M2 tutorials materials homepage, more materials will be added.","title":"M2 Tutorials Homepage"},{"location":"#m2-tutorials-homepage","text":"M2 tutorials materials homepage, more materials will be added.","title":"M2 Tutorials Homepage"},{"location":"Mkdocs%20Usage/","text":"Some mkdocs command for building the site mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout docs/ assets/ # Store site logos. Stylesheets/ # Store additional css settings. color.css # Set the theme color of the site index.md # The default homepage. about.md # Some mkdocs guide. ... # Tutorial materials, other markdown pages, images and other files. mkdocs.yml # The configuration file, all settings are here. README.md # Description of the site repository.","title":"Mkdocs Usage"},{"location":"Mkdocs%20Usage/#some-mkdocs-command-for-building-the-site","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Some mkdocs command for building the site"},{"location":"Mkdocs%20Usage/#project-layout","text":"docs/ assets/ # Store site logos. Stylesheets/ # Store additional css settings. color.css # Set the theme color of the site index.md # The default homepage. about.md # Some mkdocs guide. ... # Tutorial materials, other markdown pages, images and other files. mkdocs.yml # The configuration file, all settings are here. README.md # Description of the site repository.","title":"Project layout"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/","text":"Objectives At the end of this self-learning lab, you should be able to: * set up serial communication in Arduino * set up communication between Arduino and the computer via pySerial Serial Communication Serial communication, as its name tells, send data between devices bit by bit, in a serial way. The opposite of serial communication is parallel communication. Serial communication is commonly used nowadays. For example, USB device communicates with the computer using serial communication. Actually, you have been using Serial communication in the previous Arduino tutorials. In Arduino, the statement Serial.begin() sets up serial communication between the Arduino board and the computer over USB. In Blue Pill, besides Serial over USB, there are also 3 additional USART ports ( USART1 to USART3 ) that can be used for serial communication. They are Serial1 to Serial3 in Arduino IDE. ( API - STM32duino wiki ) As seen from there pin out of Blue Pill : * USART1 occupies PA9 and PA10 (TX1 and RX1) * USART1 occupies PA2 and PA3 (TX2 and RX2) * USART1 occupies PB10 and PB11 (TX3 and RX3) When program is uploaded using USB bootloader or ST-Link: * Serial prints to Serial USB. * Serial1 prints to hardware USART1 * Serial2 prints to hardware USART2 * Serial3 prints to hardware USART3 When using USB-Serial adapter: * Serial prints to hardware USART1 * Serial1 prints to hardware USART2 * Serial2 prints to hardware USART3 Read more about serial communication from the following websites: * Serial communication * Serial Library in Arduino * Serial communication between 2 Arduino board Try it yourself 01 Chinese whispers Grab 2 Blue pills. Flash a program to a blue pill which print Hello, World! continuously over Serial1 . They should be connected like below. Then click File \u2192 Examples \u2192 04.Communications \u2192 SerialPassthrough and flash it on one of the blue pills. This program put all data received from Serial1 to Serial and vice versa. Connect PA9 on one blue pill to PA10 on the other and vice versa. (When using USB-Serial adapter, use USART2 i.e. connect PA2 to PA3 and vice versa) Now open Serial Monitor and you should see Hello, World! is printed continuously from the second blue pill. pySerial Arduino IDE provides convenient way for showing serial communication between the Arduino boards and the Computer. Just a click on the Serial Monitor in Arduino IDE will do. However, it does not allow the computer to react according to the value received. No worry, you can write your own Serial Monitor using Python! pySerial is a Library which allows python programs to access the serial port. Thus, we can now bridge Arduino board and the computer by ourselves. If you haven't tried pySerial or want to further familiarize yourself with Python: * (Windows) Check Python Code | Arduino Lesson 17. Email Sending Movement Detector | Adafruit Learning System . (Linux) Python and pySerial can be easily installed through python-pip . Take Ubuntu as an example. sudo apt install python python-pip pip install pyserial Read more about Arduino and Python from the following websites. * Arduino and Python * Using PySerial to read data from Arduino Try it yourself 02 Take extra precautions while working at heights Flash the following program to a Blue Pill: void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { if ( Serial . available ()) { // If anything comes in Serial (USB), Serial . write ( Serial . read ()); // read it and send it out Serial1 (pins 0 & 1) } } This should pass all data sent from PC back to itself. Open Serial Monitor to see if it works. (Linux) Copy the following 2 programs as 2 separate files. change the line ser = serial.Serial('/dev/ttyACM0', 9600) according to the port name of the blue pill in your OS. It should be something like /dev/ttyACM0 . # Listener: read char from USB Serial import serial ser = serial . Serial ( '/dev/ttyACM0' , 9600 ) # port name while True : print ser . read () # Talker: send char through USB Serial import serial ser = serial . Serial ( '/dev/ttyACM0' , 9600 ) # port name while True : s = raw_input ( \"Enter your input: \" ) ser . write ( s ) Run the 2 programs together. Python programs can be executed with: python (filename) (Windows) A serial port cannot be opened twice on Windows. Therefore, we have to use a multi-thread version. Copy the following program and save it as a file. change the line ser = serial.Serial('COM3', 9600) according to the port name of the blue pill in your OS. It should be something like COM4 . import serial import threading class thread_read_serial ( threading . Thread ): # read from the blue pill def run ( self ): while True : print ser . read (), class thread_write_serial ( threading . Thread ): # write to the blue pill def run ( self ): while True : s = raw_input ( \"Enter your input: \" ) ser . write ( s ) thread1 = thread_read_serial () thread2 = thread_write_serial () ser = serial . Serial ( 'COM3' , 9600 ) # port name thread1 . start () thread2 . start () Run the program. Python programs can be executed with: python (filename) IDLE can't handle raw_input() correctly. Use command prompt instead. Words sent from the talker should be seen on the listener. Words have actually passed to the blue pill and back to PC through USB Serial. Assignment 04 You accidentally made a servo motor again Remember the motor with speed feedback you have wrote in Assignment 02 ? Modify the Arduino program and write Python programs so that you can command the speed of the motor and read the RPM of the motor on your PC. You may refer to: * The Python Standard Library * pySerial API - pySerial 3.0 documentation * Short introduction - pySerial 3.0 documentation Further reading USB CDC class - Wikipedia WsIaR? Communication! See Also Arduino Tutorials (Index)","title":"Arduino Tutorials (Communication)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * set up serial communication in Arduino * set up communication between Arduino and the computer via pySerial","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#serial-communication","text":"Serial communication, as its name tells, send data between devices bit by bit, in a serial way. The opposite of serial communication is parallel communication. Serial communication is commonly used nowadays. For example, USB device communicates with the computer using serial communication. Actually, you have been using Serial communication in the previous Arduino tutorials. In Arduino, the statement Serial.begin() sets up serial communication between the Arduino board and the computer over USB. In Blue Pill, besides Serial over USB, there are also 3 additional USART ports ( USART1 to USART3 ) that can be used for serial communication. They are Serial1 to Serial3 in Arduino IDE. ( API - STM32duino wiki ) As seen from there pin out of Blue Pill : * USART1 occupies PA9 and PA10 (TX1 and RX1) * USART1 occupies PA2 and PA3 (TX2 and RX2) * USART1 occupies PB10 and PB11 (TX3 and RX3) When program is uploaded using USB bootloader or ST-Link: * Serial prints to Serial USB. * Serial1 prints to hardware USART1 * Serial2 prints to hardware USART2 * Serial3 prints to hardware USART3 When using USB-Serial adapter: * Serial prints to hardware USART1 * Serial1 prints to hardware USART2 * Serial2 prints to hardware USART3 Read more about serial communication from the following websites: * Serial communication * Serial Library in Arduino * Serial communication between 2 Arduino board","title":"Serial Communication"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#try-it-yourself-01","text":"Chinese whispers Grab 2 Blue pills. Flash a program to a blue pill which print Hello, World! continuously over Serial1 . They should be connected like below. Then click File \u2192 Examples \u2192 04.Communications \u2192 SerialPassthrough and flash it on one of the blue pills. This program put all data received from Serial1 to Serial and vice versa. Connect PA9 on one blue pill to PA10 on the other and vice versa. (When using USB-Serial adapter, use USART2 i.e. connect PA2 to PA3 and vice versa) Now open Serial Monitor and you should see Hello, World! is printed continuously from the second blue pill.","title":"Try it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#pyserial","text":"Arduino IDE provides convenient way for showing serial communication between the Arduino boards and the Computer. Just a click on the Serial Monitor in Arduino IDE will do. However, it does not allow the computer to react according to the value received. No worry, you can write your own Serial Monitor using Python! pySerial is a Library which allows python programs to access the serial port. Thus, we can now bridge Arduino board and the computer by ourselves. If you haven't tried pySerial or want to further familiarize yourself with Python: * (Windows) Check Python Code | Arduino Lesson 17. Email Sending Movement Detector | Adafruit Learning System . (Linux) Python and pySerial can be easily installed through python-pip . Take Ubuntu as an example. sudo apt install python python-pip pip install pyserial Read more about Arduino and Python from the following websites. * Arduino and Python * Using PySerial to read data from Arduino","title":"pySerial"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#try-it-yourself-02","text":"Take extra precautions while working at heights Flash the following program to a Blue Pill: void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { if ( Serial . available ()) { // If anything comes in Serial (USB), Serial . write ( Serial . read ()); // read it and send it out Serial1 (pins 0 & 1) } } This should pass all data sent from PC back to itself. Open Serial Monitor to see if it works. (Linux) Copy the following 2 programs as 2 separate files. change the line ser = serial.Serial('/dev/ttyACM0', 9600) according to the port name of the blue pill in your OS. It should be something like /dev/ttyACM0 . # Listener: read char from USB Serial import serial ser = serial . Serial ( '/dev/ttyACM0' , 9600 ) # port name while True : print ser . read () # Talker: send char through USB Serial import serial ser = serial . Serial ( '/dev/ttyACM0' , 9600 ) # port name while True : s = raw_input ( \"Enter your input: \" ) ser . write ( s ) Run the 2 programs together. Python programs can be executed with: python (filename) (Windows) A serial port cannot be opened twice on Windows. Therefore, we have to use a multi-thread version. Copy the following program and save it as a file. change the line ser = serial.Serial('COM3', 9600) according to the port name of the blue pill in your OS. It should be something like COM4 . import serial import threading class thread_read_serial ( threading . Thread ): # read from the blue pill def run ( self ): while True : print ser . read (), class thread_write_serial ( threading . Thread ): # write to the blue pill def run ( self ): while True : s = raw_input ( \"Enter your input: \" ) ser . write ( s ) thread1 = thread_read_serial () thread2 = thread_write_serial () ser = serial . Serial ( 'COM3' , 9600 ) # port name thread1 . start () thread2 . start () Run the program. Python programs can be executed with: python (filename) IDLE can't handle raw_input() correctly. Use command prompt instead. Words sent from the talker should be seen on the listener. Words have actually passed to the blue pill and back to PC through USB Serial.","title":"Try it yourself 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#assignment-04","text":"You accidentally made a servo motor again Remember the motor with speed feedback you have wrote in Assignment 02 ? Modify the Arduino program and write Python programs so that you can command the speed of the motor and read the RPM of the motor on your PC. You may refer to: * The Python Standard Library * pySerial API - pySerial 3.0 documentation * Short introduction - pySerial 3.0 documentation","title":"Assignment 04"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#further-reading","text":"USB CDC class - Wikipedia WsIaR? Communication!","title":"Further reading"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Communication%29/#see-also","text":"Arduino Tutorials (Index)","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/","text":"Next Tutorial: Learning basic programming with Arduino Objectives At the end of this self-learning lab, you should be able to: * understand Arduino\u2019s hardware * starting using Arduino IDE * write basic Arduino codes What is Arduino? Arduino is an open-source platform used for building electronics projects. It consists of Arduino boards and the Arduino software. Arduino board is a physical programmable circuit board, or simply called a microcontroller ( MCU for microcontroller unit). There are many different types of Arduino boards with different characteristics, including Arduino UNO, Arduino NANO and Arduino MEGA. Arduino IDE makes it easy for beginners to write code and upload it to the board. It uses a dialect of features from C++. What's STM32? STM32 is a family of 32-bit MCU by STMicroelectronics. There are many development boards based on STM32 chips on the market. So, is STM32 Arduino? No. Then, why are you telling me about STM32? People have made a Arduino Core for STM32 development boards, thus we can use Arduino IDE to programme STM32 boards, which has a shallower learning curves than using \u00b5Vision. Blue Pill Blue Pill is the nickname given to the most popular, ultra-cheap and compact STM32F103C8T6 development board made by Chinese manufacturers. Hardware Specification Hardware Spec MCU STM32F103C8 Flash 64 KB RAM 20 KB Clock Speed 72 MHz Voltage regulator RT9193-33 (300 mA) Schematic Vcc-gnd.com-STM32F103C8-schematic.pdf Board Anatomy Pins PA0 - PA15 (marked as A0 - A15 on the board) PB0 - PB15 (marked as B0 - B15) PC13 - PC15 (marked as C13 - A15) They are the main characters of the board, GPIO (General-purpose input/output), which have digital signal inputs and outputs depend on how the program has defined them, which will be explain later. They also have alternate functions, such as PWM, ADC, DAC, USART, I2C, SPI, CAN and many others (You may read STM32F1 Reference Manual to get to know more). The maximum current output from a GPIO is 25 mA. * GND (marked as G) Ground. Should be connected to the ground of your circuits. * 3.3V 3.3V Power supply from the voltage regulator ( RT9193-33 ). Can be used to provide +3.3V power. * 5V Even though it is called 5V, it is actually a power input pin and does not guarantee to be 5V. You may connect it with external power supply to power the board, and the recommanded power supply is 3.3V - 5.5V. It is directly connected to the 5V pin of USB, so remember NEVER connect USB and other power supply at the same time, or draw to much current from this pin. Otherwise, it may FRY your PC. * NRST (marked as R) It is connected to the reset button. Alternatively, connecting this pin to the ground can reset the microcontroller too. (The name start with N means it is activated when connecting to the ground) * DIO, DCLK It is used to connect to a hardware programmer such as ST-Link and J-link. * VBAT (marked as VB) Power supply for RTC, external clock 32 kHz oscillator and backup registers. Doesn't really matter. * LED * Power LED It indicates that your Blue Pill is receiving power. It is useful for debugging. * PC13 LED It is connected to PC13 and 3V3 (sure with a current-limiting resistor), and it will light up when a LOW signal is assigned to pin PC13. Besides being a handy target for your first blink sketch, this LED is very useful for debugging. * STM32F103CT6 The heart of your board. The processor, flash memory, SRAM and EEPROM written in the specification above are all integrated in this small chip. * micro USB port Used for powering your board, uploading your sketches to your board, and for communicating with your board via serial communication. * Reset button Resets the microcontroller. Now, you have already had a basic understanding of the hardware. Yet, without the software, it is just a piece of rubbish. Let get into the software of Arduino IDE. Arduino IDE The Arduino Integrated Development Environment(IDE), or Arduino Software, contains a text editor for writing code, a message area, a text console, a toolbar with buttons for common functions and a series of menus. It connects to the development boards to upload programs and communicate with them. Arduino provides both online IDE (Arduino Web Editor) and desktop IDE for installation. More details of Arduino IDE can be seen at Guide - Arduino . Web Editor provides less functionality which is not suitable for our works. Let\u2019s have a look at it. Installation Arduino IDE Download the Arduino IDE from Arduino official website . * Please DON'T use the Arduino Web Editor. It is impossible to install third-party hardwares and libraries, which we will be doing in the next step. * If you are a Windows user, please DON'T install from Microsoft store. Use Windows Installer instead. * If you are a Ubuntu user, please DON'T install from official Ubuntu package . It is version 1.0.5, released at 2013-05-15. STM32 Arduino Core Open Arduino IDE. Press File -> Preferences. You should see you Sketchbook location , which should be <something>\\Arduino . Go to the sketchbook location and make a new folder called hardware in the Arduino folder. Download Arduino STM32 from Roger Clark. Extract the ZIP file and put it under hardware you just made. For Windows user, go to Arduino_STM32\\drivers\\win and run install_drivers.bat . For Linux user, go to Arduino_STM32/tools/linux64 and run install.sh . Install 32-bit shared libraries for AMD64 too ( sudo apt install libc6-i386 for Ubuntu). Restart Arduino IDE. Press Tools -> Board: <something> . You should see STM32 Boards (STM32duino.com) in the menu. Press Tools -> Board: <something> -> Boards Manager . Install Arduino SAM Boards . All we want is the compiler arm-none-eabi-g++ . Press to see if it can compile. Please DON'T install Arduino Core STM32 from ST official, i.e. don't use the method with 'Additional Boards Managers URLs'. It does not support uploading the codes with USB bootloader. Interface Meaning of buttons in IDE interface: * Verify * Checks your code for errors. Will not upload your code to the board. * Upload * Compiles your code and uploads it to the board. See uploading below for details. * New * Creates a new sketch. * Open * Presents a menu of all the sketches in your sketchbook. Clicking one will open it within the current window overwriting its content. * Save * Saves your sketch. Inside the file \u201cPlaceForCode\u201d, it is the place where you put your code in. On the 1st line of the code, you can see void setup() . It is a function for the STM32 to run once at begin. Meaning of void and function will be discussed later. The braces symbol {} on line 1 and 4 define the scope of the setup() function. The function under setup() is loop(). It is a function that will run repeatedly after the setup() function has run once at begin. Thus, the program flow is as below. Now, you should know that Blue Pill will first execute the codes in setup() for one time, and then repeatedly execute the code in loop(). Yet, what code should be put in these functions? Here comes the answer. Section Check Box: What is Arduino IDE and its usage Meaning of buttons in IDE interfaces void setup() { \u2026 } void loop() { \u2026 } Basic Arduino Code The program in Arduino IDE is very similar to C++ codes, which will be introduced in the next tutorial. Let\u2019s write a simple program that can control the LED to blink now. First program: Blink Click File \u2192 Examples \u2192 01.Basics \u2192 Blink . Change LED_BUILTIN into PC13 . It should look like: void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( PC13 , OUTPUT ); } // the loop function runs over and over again forever void loop () { digitalWrite ( PC13 , HIGH ); // turn the LED on (HIGH is the voltage level) delay ( 1000 ); // wait for a second digitalWrite ( PC13 , LOW ); // turn the LED off by making the voltage LOW delay ( 1000 ); // wait for a second } As said in the previous section, the program starts from the setup() function in line 1. { and } on line 1 and 3 defines the scope of setup() function. Inside this setup() function, on line 2, we have pinMode(PC13, OUTPUT); written there. This line is an instruction that tells the board to do something. This instruction is called a statement. Usually a statement fit in exactly one line. Each statement MUST end with a semicolon to denote that the statement has finished. *. pinMode(PC13, OUTPUT) It configures a pin as either an input or an output. Input means you use the pin to detect the voltage on the external circuit connected to that pin (will be discussed later), while output means you use the pin to output a voltage to control something. PC13 and OUTPUT are the two parameters that are required by pinMode(). PC13 means you are referring to pin PC13. Thus, you can change it to another pin, so that the pin mode of another pin can be defined. OUTPUT means you want the pin you have stated in the 1st statement to be in output mode. You can change it to INPUT so the pin is defined to be in INPUT mode. Noted that the M in pinMode must be in capital letter. The word OUTPUT and INPUT must be in capital letter too. After the setup is finished, the program will then go into the loop() function. Line 6-9 are the 4 statements inside loop(). digitalWrite(PC13, HIGH) It means supplying 3.3 volts (HIGH logic signal) to pin PC13 from 0 volt (LOW logic signal) before this statement is executed. digital in digitalWrite means you can only write either HIGH or LOW value to the pin, corresponding to 1 or 0 for computer. Write in digitalWrite means you are writing a value a pin, rather than reading a value. The opposite of this statement is digitalRead(pin) which will be discussed later. Just like in pinMode(PC13, OUTPUT); , PC13 and HIGH in digitalWrite(PC13, HIGH) are the two parameters for digitalWrites. The statement pinMode(PC13, OUTPUT); must be executed before digitalWrite(PC13, HIGH); , otherwise you may encounter unexpected situations. delay(1000); It pauses the program for the amount of time (in milliseconds) specified as parameter. 1000 means 1000 milliseconds, which is equal to 1 second. digitalWrite(PC13, LOW) Similar to digitalWrite(PC13, HIGH); , it controls the voltage output of pin PC13. This time, it assigns a LOW value to pin PC13 , which means supplying 0 volt to the pin. Comment - useful but also useless You may notice that there are sentences after the statements. They are comments. Comments are lines in the program that are used to inform yourself or others about the way the program works. They are ignored by the STM32. Thus, comments are useful for yourself to view the code, but useless for the board to execute the code. Comments only purpose are to help you understand (or remember) how your program works or to inform others how your program works. There are two different ways of marking a line as a comment. Using double slash // The comment starts after the // . It is a single line comment. Anything after the slashes is a comment to the end of the line. Using /* and */ The comment starts after /* , all the way through lines and sentences to */ . Unlike the double slash, it is multiline comment, using to comment out whole blocks of code. Section Check Box: pinMode(pin , mode) semi-colon ; digitalWrite(pin , value) delay(milliseconds) Comment // or /* \u2026 */ The more you know PC13 (and all other pins) are defined in Arduino_STM32/STM32F1/variants/generic_stm32f103c/board/board.h , which facilitate programmer to write codes. PC13 is defined as the integer 32 . The code still works if you replace PC13 with 32 , but this is discouraged as it makes the code less readable. Upload the Code to board You now have your code ready. It is time to put your code into the board to get the actual result. First of all, you should have your USB wire and the Blue Pill prepared. Plug in the micro USB wire to Blue Pill and the other side to the computer. The red power LED on the board turned on shows that the it is working. Return to the Arduino IDE. Before we upload the code to the board, we need to check that the IDE knows what development board we are using and which port is it connected to. Press Tools \u2192 Port . If there are more than one choices of port, just randomly select one. If it is not the port you have you board connected to, error will be shown when you upload your code to the board. Just try and find out the one which gives no error and that is the desired port. Press Tools \u2192 Board: <something> . Select Generic STM32F103C series under STM32 Boards (STM32duino.com) . Press Tools \u2192 Variant: <something> . Select STM32F103C8 (20k RAM, 64k Flash) . Press Tools \u2192 Upload method: <something> . Select STM32duino bootloader . After the preparation steps done, we can now upload our code to the board. Click the upload button and wait for it to compile\u2026 When you see the words \u201cDone uploading\u201d, it means that your code has successfully uploaded to the board. You should now see another LED on the board blinking in a one second interval. Congratulation! You have learnt how to control your Blue Pill now. Section Check Box: Select the correct board from Tools \u2192 Board , Variant and Upload method Select the correct port from Tools \u2192 Port The more you know Blue Pills just bought doesn't come with USB bootloader. USB port won't show up without USB bootloader. Standard method to flash programs is using a hardware programmer e.g. ST-Link, J-Link, or using a USB-TTL adapter along the built-in Serial bootloader on STM32. Appendix below will introduce the method to flash USB bootloader. Error and Debugging Sometimes, a program will not compile and upload to the board successfully. Just like the one below. (To try it out, just randomly delete a semi-colon) It shows that there is something wrong in the program. Go back to the highlighted line and find out what is wrong there. It is usually careless mistakes such as forgetting to add a semi-colon or capitalisation issue. If you don\u2019t know what\u2019s wrong with the code, you can ask us or copy the error message and search it on Google. If this error message \u2013 Problem uploading to board happens, there should be no error in your code. Problem arise from the data transfer between the board and computer. Simply unplug the board from the USB and plug it in again, and then reupload the code to the board can usually solve the problem. If it doesn't solve the problems, check the FAQ below . Try it yourself 01 S.O.S. Signal Write an Arduino code to light up LED PC13 on the board, sending out the S.O.S. signal. As you should know, in Morse code, S can be represented by 3 short flashes, while O is represented by 3 long flashes. Note that a LOW signal actually turn the PC13 LED on. pinMode(pin, INPUT) & DigitalRead(pin) As mentioned before, apart from digitalWrite(pin, value) which controls the voltage output of the pin, we have digitalRead(pin) which reads the value from a specified digital pin. It will return either HIGH or LOW value, corresponding to 1 and 0. The syntax digitalRead(pin) only take 1 parameter, which is the digital pin you want to read. Before you execute digitalRead(pin) , you need to set the pin to INPUT mode first. Here is a code using both digitalRead and digitalWrite . It controls the LED on and off by pressing a button. void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( PC13 , OUTPUT ); pinMode ( PB9 , INPUT_PULLDOWN ); } void loop () { digitalWrite ( PC13 , digitalRead ( PB9 )); //delay(10); } pinMode(PB9, INPUT_PULLDOWN) As pin PC13 is used to output voltage to the LED, we will use another pin to read the input value, let\u2019s say, pin PB9. Thus, we type pinMode(PB9, INPUT_PULLDOWN) to tell the board that we want to set the mode of pin PB9 into reading inputs. digitalWrite(PC13, digitalRead(PB9)) You should remember that digitalRead(pin, value) takes 2 parameters. For value, you set it as HIGH or LOW. This value can also be provided by digitalRead(pin) , which give you exactly HIGH or LOW value. Thus, you can type digitalRead(PB9) in the 2nd parameter directly. The board will get the value of 2nd parameter for digitalWrite automatically from digitalRead. We will setup a circuit like this to let pin PB9 to read the value. The circuit starts from the 3.3V pin which constantly providing 3.3V, to the GND pin. Apart from the button, A resistor is added into the circuit. Pin PB9 is connected between the button and the resistor, so it is at 3.3V a.k.a. HIGH signal when you press the button. To implement this, you need a breadboard, a button, a resistor and several male-to-male Dupont wires prepared. Connect the components as bellows. This is a breadboard, which has holes that let you easily insert electronic components to prototype an electronic circuit, and it has inter-connection between holes as above. The circuit should be similar to the one above. Green dots on the above figure across a row in the graph above mean they are electrically connected to each other. You can now upload your new code to the board. If it works correctly, the pin PC13 LED should turn off when you press the button and turn on when you release. Section Check Box: pinMode(pin, INPUT); digitalRead(pin); Try it yourself 02 Send a signal by button 1. Write an Arduino code which will light up LED 13 for 0.5 seconds when it button is pressed. The light turns off for 0.5 seconds afterwards, and then turn on again if the button is stilled pressed. 2. You should notice that a resistor is needed in the circuit. It is called a pull-down resistor . Disconnect it and see if anything is changed. Now let's change pinMode(PB9, INPUT_PULLDOWN) into: * pinMode(PB9, INPUT) * pinMode(PB9, INPUT_PULLUP) Does it still work without the pull-down resistor? You may read [Arduino_STM32/io.h at master \u00b7 rogerclarkmelbourne/Arduino_STM32](https://github.com/rogerclarkmelbourne/Arduino_STM32/blob/master/STM32F1/cores/maple/io.h) and [Input configuration on STM32F1 Reference Manual](https://www.st.com/content/ccc/resource/technical/document/reference_manual/59/b9/ba/7f/11/af/43/d5/CD00171190.pdf/files/CD00171190.pdf/jcr:content/translations/en.CD00171190.pdf#%5B%7B%22num%22%3A236%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C67%2C754%2Cnull%5D) to get to know more. Serial Write We can also display some messages from the board to the computer through serial communication. Type the code below. void setup () { // It takes some time before Blue Pill can reconnect to PC // Delay is needed when there is serial communication // Genuine Arduino does not require a delay here // add more if 1500 is not enough // Alternatively, while(!Serial); can be used after Serial.begin(9600); , which will block the program from execution until Serial Monitor is opened delay ( 1500 ); // Initiate Serial communication Serial . begin ( 9600 ); } void loop () { Serial . println ( \"Hello, World!\" ); delay ( 1000 ); // So that it wouldn't print crazily } Serial.begin(9600) For us to use the functions of the Serial library, we have to initiate serial communication \u2013 to do this we use the Serial.begin() function. Serial.begin() needs to go in the setup() . Now for reasons beyond the scope of this discussion, it is convenient to use the number 9600 in the Serial.begin() function. The value 9600 specifies the baud rate . The baud rate is the rate at which information will pass between Blue pill and the computer. Serial.println(\"Hello, World!\") This statement will print the words you type inside \"\u2026\" to the computer. Upload your code to the Blue Pill. You cannot see the words printed on the computer yet. You will need to press Ctrl+Shift+M to open the Serial Monitor. The words are printed there. Section Check Box: Serial.begin(9600); Serial.println(); Try it yourself 03 Printing words You should notice that the program above will print the words repeatedly. Write a code that will only print once only and at least two different sentences. Apart from Serial.println() , there is also Serial.print() . Try to find out the difference between them. Serial read In order to send information to the Blue pill, we can use Serial read. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { // Block the program from execution until there is serial input // Can be omitted if getting serial input is not necessary while ( Serial . available () == 0 ); // Read until the serial buffer is empty while ( Serial . available () > 0 ) { char reveived_byte = Serial . read (); Serial . println ( reveived_byte ); } } Press Ctrl+Shift+M to open the Serial Monitor. Type some words and then press Send . Serial.available() returns the number of bytes in the serial buffer that send from PC to blue pill. Let's say if you send Hello in the Serial Monitor, the return value will immediately change from 0 to 6, as you have just typed 6 characters. ( Why 6 characters? ) Serial.read() returns the first character from the buffer. Serial.println(reveived_byte) prints the character that it just gets. Section Check Box: Serial.available() Serial.read() Try it yourself 04 More than words In order to parse a integer from serial input, you may check the ASCII table and manipulate the input char . Alternatively, built-in function Serial.parseInt() can be used. Change the lines from char reveived_byte = Serial.read(); Serial.println(reveived_byte); into int reveived_int = Serial.parseInt(); Serial.println(reveived_int); How does it behave? What if your input is not an integer? What if the input I want is a float ? String ? Check Serial - Arduino Reference to find the see which function can get the job done. Appendix: FAQ Q: STM32 Boards (STM32duino.com) can not be seen under Tools \u2192 Board: <something> . A: Make sure you folder is structured like this: (Sketchbook location)\\hardware\\Arduino_STM32_master\\(some folders e.g. drivers\\ and tools\\) Q: exec: '<something>\\arm-none-eabi-g++': file does not exist A: Press Tools -> Board: <something> -> Boards Manager . Install Arduino SAM Boards . Q: <some_path>/maple_upload: line 29: <some_path>/upload-reset: No such file or directory A: This is because upload-reset is a 32-bit executable. You may verify this through file some_path>/upload-reset , which shows that it is a ELF 32-bit LSB executable . Install 32-bit shared libraries for AMD64: sudo apt install libc6-i386 . Q: built-in LED keep flashing and unable to upload code A: Press reset button and upload new code. Repeat a couple of times if it doesn't work. Notice that port name maybe changed after reset. If it still doesn't work, flash the USB bootloader again. Q: WARN src/stlink-common.c: unknown chip id! 0xa05f0000 A: USB bootloader already uploaded. In order to overwrite the USB bootloader, press reset and immediately flash the new firmware with ST-Link. Q: Access is denied on Windows. A: Don't install Arduino IDE from MS App Store. Install from Arduino official website instead. Reference: windows 10 upload \"Access is denied\" error on bluepill - Arduino for STM32 * Q: fatal error: Arduino.h: No such file or directory * A: Remove the folder C:\\Users\\(your_user_name)\\AppData\\Local\\Arduino15\\ , then install Arduino SAM Boards from Boards Manager once again. If it still doesn't work, then try not to put you Sketchbook location under \\OneDrive . * Q: Blue Pill can not be found after being plugged, or Access is denied * A: Use another USB cable. * Q: Still not found after replacing a USB cable. * A: There are other methods to upload program including using a USB-to-Serial adapter and using a ST-LINK, which can be found at M2. Check Uploading a sketch - STM32duino wiki to read how it's done. Be aware that is the USB bootloader is erased after using either one of these method, so they can no longer be programmed via USB until USB bootloader is flashed to the board once again. * Q: I found a typo in the article. * A: Please tell us. Appendix: how to flash USB bootloader Download bootloader generic_boot20_pc13.bin . The version pc13 is used as the LED on blue pill is on PIN PC13. Connect the ST-Link with the Blue Pill. SWDIO , SWCLK , 3.3V and GND are the only pins required on ST-Link. Remember, DON'T provide power to the Blue pill from both ST-Link and USB. Flash the bootloader. (Linux) We may use st-flash that come along with Arduino STM32. cd /home/m2_is_neat/Arduino/hardware/Arduino_STM32-master/tools/linux64/stlink/ ( Depends on where you put sketchbook folder ) ./st-flash write /home/m2_is_neat/I_put_my_file_here/generic_boot20_pc13.bin 0x8000000 Reference: Flashing Bootloader for BluePill Boards \u00b7 rogerclarkmelbourne/Arduino_STM32 Wiki References Blue Pill - STM32duino wiki rogerclarkmelbourne/STM32duino-bootloader: Bootloader for STM32F103 boards, for use with the Arduino_STM32 repo and the Arduino IDE Bootloader rogerclarkmelbourne/Arduino_STM32 Wiki Further Reading STM32F103C8 Datasheet , which mentioned the physical properties of STM32F103, such as hardware specifications, ratings (e.g. supply voltage, output current), pinout, suggested circuit designs and many others. STM32F1 Reference Manual , which mentioned how a STM32F1 behaves and how to use STM32F1. See Also Arduino Tutorials (Index) Learning basic programming with Arduino","title":"Arduino Tutorials (Getting Started with Arduino IDE)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * understand Arduino\u2019s hardware * starting using Arduino IDE * write basic Arduino codes","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#what-is-arduino","text":"Arduino is an open-source platform used for building electronics projects. It consists of Arduino boards and the Arduino software. Arduino board is a physical programmable circuit board, or simply called a microcontroller ( MCU for microcontroller unit). There are many different types of Arduino boards with different characteristics, including Arduino UNO, Arduino NANO and Arduino MEGA. Arduino IDE makes it easy for beginners to write code and upload it to the board. It uses a dialect of features from C++.","title":"What is Arduino?"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#whats-stm32","text":"STM32 is a family of 32-bit MCU by STMicroelectronics. There are many development boards based on STM32 chips on the market.","title":"What's STM32?"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#so-is-stm32-arduino","text":"No.","title":"So, is STM32 Arduino?"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#then-why-are-you-telling-me-about-stm32","text":"People have made a Arduino Core for STM32 development boards, thus we can use Arduino IDE to programme STM32 boards, which has a shallower learning curves than using \u00b5Vision.","title":"Then, why are you telling me about STM32?"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#blue-pill","text":"Blue Pill is the nickname given to the most popular, ultra-cheap and compact STM32F103C8T6 development board made by Chinese manufacturers.","title":"Blue Pill"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#hardware-specification","text":"Hardware Spec MCU STM32F103C8 Flash 64 KB RAM 20 KB Clock Speed 72 MHz Voltage regulator RT9193-33 (300 mA) Schematic Vcc-gnd.com-STM32F103C8-schematic.pdf","title":"Hardware Specification"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#board-anatomy","text":"Pins PA0 - PA15 (marked as A0 - A15 on the board) PB0 - PB15 (marked as B0 - B15) PC13 - PC15 (marked as C13 - A15) They are the main characters of the board, GPIO (General-purpose input/output), which have digital signal inputs and outputs depend on how the program has defined them, which will be explain later. They also have alternate functions, such as PWM, ADC, DAC, USART, I2C, SPI, CAN and many others (You may read STM32F1 Reference Manual to get to know more). The maximum current output from a GPIO is 25 mA. * GND (marked as G) Ground. Should be connected to the ground of your circuits. * 3.3V 3.3V Power supply from the voltage regulator ( RT9193-33 ). Can be used to provide +3.3V power. * 5V Even though it is called 5V, it is actually a power input pin and does not guarantee to be 5V. You may connect it with external power supply to power the board, and the recommanded power supply is 3.3V - 5.5V. It is directly connected to the 5V pin of USB, so remember NEVER connect USB and other power supply at the same time, or draw to much current from this pin. Otherwise, it may FRY your PC. * NRST (marked as R) It is connected to the reset button. Alternatively, connecting this pin to the ground can reset the microcontroller too. (The name start with N means it is activated when connecting to the ground) * DIO, DCLK It is used to connect to a hardware programmer such as ST-Link and J-link. * VBAT (marked as VB) Power supply for RTC, external clock 32 kHz oscillator and backup registers. Doesn't really matter. * LED * Power LED It indicates that your Blue Pill is receiving power. It is useful for debugging. * PC13 LED It is connected to PC13 and 3V3 (sure with a current-limiting resistor), and it will light up when a LOW signal is assigned to pin PC13. Besides being a handy target for your first blink sketch, this LED is very useful for debugging. * STM32F103CT6 The heart of your board. The processor, flash memory, SRAM and EEPROM written in the specification above are all integrated in this small chip. * micro USB port Used for powering your board, uploading your sketches to your board, and for communicating with your board via serial communication. * Reset button Resets the microcontroller. Now, you have already had a basic understanding of the hardware. Yet, without the software, it is just a piece of rubbish. Let get into the software of Arduino IDE.","title":"Board Anatomy"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#arduino-ide","text":"The Arduino Integrated Development Environment(IDE), or Arduino Software, contains a text editor for writing code, a message area, a text console, a toolbar with buttons for common functions and a series of menus. It connects to the development boards to upload programs and communicate with them. Arduino provides both online IDE (Arduino Web Editor) and desktop IDE for installation. More details of Arduino IDE can be seen at Guide - Arduino . Web Editor provides less functionality which is not suitable for our works. Let\u2019s have a look at it.","title":"Arduino IDE"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#installation","text":"","title":"Installation"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#arduino-ide_1","text":"Download the Arduino IDE from Arduino official website . * Please DON'T use the Arduino Web Editor. It is impossible to install third-party hardwares and libraries, which we will be doing in the next step. * If you are a Windows user, please DON'T install from Microsoft store. Use Windows Installer instead. * If you are a Ubuntu user, please DON'T install from official Ubuntu package . It is version 1.0.5, released at 2013-05-15.","title":"Arduino IDE"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#stm32-arduino-core","text":"Open Arduino IDE. Press File -> Preferences. You should see you Sketchbook location , which should be <something>\\Arduino . Go to the sketchbook location and make a new folder called hardware in the Arduino folder. Download Arduino STM32 from Roger Clark. Extract the ZIP file and put it under hardware you just made. For Windows user, go to Arduino_STM32\\drivers\\win and run install_drivers.bat . For Linux user, go to Arduino_STM32/tools/linux64 and run install.sh . Install 32-bit shared libraries for AMD64 too ( sudo apt install libc6-i386 for Ubuntu). Restart Arduino IDE. Press Tools -> Board: <something> . You should see STM32 Boards (STM32duino.com) in the menu. Press Tools -> Board: <something> -> Boards Manager . Install Arduino SAM Boards . All we want is the compiler arm-none-eabi-g++ . Press to see if it can compile. Please DON'T install Arduino Core STM32 from ST official, i.e. don't use the method with 'Additional Boards Managers URLs'. It does not support uploading the codes with USB bootloader.","title":"STM32 Arduino Core"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#interface","text":"Meaning of buttons in IDE interface: * Verify * Checks your code for errors. Will not upload your code to the board. * Upload * Compiles your code and uploads it to the board. See uploading below for details. * New * Creates a new sketch. * Open * Presents a menu of all the sketches in your sketchbook. Clicking one will open it within the current window overwriting its content. * Save * Saves your sketch. Inside the file \u201cPlaceForCode\u201d, it is the place where you put your code in. On the 1st line of the code, you can see void setup() . It is a function for the STM32 to run once at begin. Meaning of void and function will be discussed later. The braces symbol {} on line 1 and 4 define the scope of the setup() function. The function under setup() is loop(). It is a function that will run repeatedly after the setup() function has run once at begin. Thus, the program flow is as below. Now, you should know that Blue Pill will first execute the codes in setup() for one time, and then repeatedly execute the code in loop(). Yet, what code should be put in these functions? Here comes the answer.","title":"Interface"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box","text":"What is Arduino IDE and its usage Meaning of buttons in IDE interfaces void setup() { \u2026 } void loop() { \u2026 }","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#basic-arduino-code","text":"The program in Arduino IDE is very similar to C++ codes, which will be introduced in the next tutorial. Let\u2019s write a simple program that can control the LED to blink now.","title":"Basic Arduino Code"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#first-program-blink","text":"Click File \u2192 Examples \u2192 01.Basics \u2192 Blink . Change LED_BUILTIN into PC13 . It should look like: void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( PC13 , OUTPUT ); } // the loop function runs over and over again forever void loop () { digitalWrite ( PC13 , HIGH ); // turn the LED on (HIGH is the voltage level) delay ( 1000 ); // wait for a second digitalWrite ( PC13 , LOW ); // turn the LED off by making the voltage LOW delay ( 1000 ); // wait for a second } As said in the previous section, the program starts from the setup() function in line 1. { and } on line 1 and 3 defines the scope of setup() function. Inside this setup() function, on line 2, we have pinMode(PC13, OUTPUT); written there. This line is an instruction that tells the board to do something. This instruction is called a statement. Usually a statement fit in exactly one line. Each statement MUST end with a semicolon to denote that the statement has finished. *. pinMode(PC13, OUTPUT) It configures a pin as either an input or an output. Input means you use the pin to detect the voltage on the external circuit connected to that pin (will be discussed later), while output means you use the pin to output a voltage to control something. PC13 and OUTPUT are the two parameters that are required by pinMode(). PC13 means you are referring to pin PC13. Thus, you can change it to another pin, so that the pin mode of another pin can be defined. OUTPUT means you want the pin you have stated in the 1st statement to be in output mode. You can change it to INPUT so the pin is defined to be in INPUT mode. Noted that the M in pinMode must be in capital letter. The word OUTPUT and INPUT must be in capital letter too. After the setup is finished, the program will then go into the loop() function. Line 6-9 are the 4 statements inside loop(). digitalWrite(PC13, HIGH) It means supplying 3.3 volts (HIGH logic signal) to pin PC13 from 0 volt (LOW logic signal) before this statement is executed. digital in digitalWrite means you can only write either HIGH or LOW value to the pin, corresponding to 1 or 0 for computer. Write in digitalWrite means you are writing a value a pin, rather than reading a value. The opposite of this statement is digitalRead(pin) which will be discussed later. Just like in pinMode(PC13, OUTPUT); , PC13 and HIGH in digitalWrite(PC13, HIGH) are the two parameters for digitalWrites. The statement pinMode(PC13, OUTPUT); must be executed before digitalWrite(PC13, HIGH); , otherwise you may encounter unexpected situations. delay(1000); It pauses the program for the amount of time (in milliseconds) specified as parameter. 1000 means 1000 milliseconds, which is equal to 1 second. digitalWrite(PC13, LOW) Similar to digitalWrite(PC13, HIGH); , it controls the voltage output of pin PC13. This time, it assigns a LOW value to pin PC13 , which means supplying 0 volt to the pin. Comment - useful but also useless You may notice that there are sentences after the statements. They are comments. Comments are lines in the program that are used to inform yourself or others about the way the program works. They are ignored by the STM32. Thus, comments are useful for yourself to view the code, but useless for the board to execute the code. Comments only purpose are to help you understand (or remember) how your program works or to inform others how your program works. There are two different ways of marking a line as a comment. Using double slash // The comment starts after the // . It is a single line comment. Anything after the slashes is a comment to the end of the line. Using /* and */ The comment starts after /* , all the way through lines and sentences to */ . Unlike the double slash, it is multiline comment, using to comment out whole blocks of code.","title":"First program: Blink"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box_1","text":"pinMode(pin , mode) semi-colon ; digitalWrite(pin , value) delay(milliseconds) Comment // or /* \u2026 */","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#the-more-you-know","text":"PC13 (and all other pins) are defined in Arduino_STM32/STM32F1/variants/generic_stm32f103c/board/board.h , which facilitate programmer to write codes. PC13 is defined as the integer 32 . The code still works if you replace PC13 with 32 , but this is discouraged as it makes the code less readable.","title":"The more you know"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#upload-the-code-to-board","text":"You now have your code ready. It is time to put your code into the board to get the actual result. First of all, you should have your USB wire and the Blue Pill prepared. Plug in the micro USB wire to Blue Pill and the other side to the computer. The red power LED on the board turned on shows that the it is working. Return to the Arduino IDE. Before we upload the code to the board, we need to check that the IDE knows what development board we are using and which port is it connected to. Press Tools \u2192 Port . If there are more than one choices of port, just randomly select one. If it is not the port you have you board connected to, error will be shown when you upload your code to the board. Just try and find out the one which gives no error and that is the desired port. Press Tools \u2192 Board: <something> . Select Generic STM32F103C series under STM32 Boards (STM32duino.com) . Press Tools \u2192 Variant: <something> . Select STM32F103C8 (20k RAM, 64k Flash) . Press Tools \u2192 Upload method: <something> . Select STM32duino bootloader . After the preparation steps done, we can now upload our code to the board. Click the upload button and wait for it to compile\u2026 When you see the words \u201cDone uploading\u201d, it means that your code has successfully uploaded to the board. You should now see another LED on the board blinking in a one second interval. Congratulation! You have learnt how to control your Blue Pill now.","title":"Upload the Code to board"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box_2","text":"Select the correct board from Tools \u2192 Board , Variant and Upload method Select the correct port from Tools \u2192 Port","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#the-more-you-know_1","text":"Blue Pills just bought doesn't come with USB bootloader. USB port won't show up without USB bootloader. Standard method to flash programs is using a hardware programmer e.g. ST-Link, J-Link, or using a USB-TTL adapter along the built-in Serial bootloader on STM32. Appendix below will introduce the method to flash USB bootloader.","title":"The more you know"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#error-and-debugging","text":"Sometimes, a program will not compile and upload to the board successfully. Just like the one below. (To try it out, just randomly delete a semi-colon) It shows that there is something wrong in the program. Go back to the highlighted line and find out what is wrong there. It is usually careless mistakes such as forgetting to add a semi-colon or capitalisation issue. If you don\u2019t know what\u2019s wrong with the code, you can ask us or copy the error message and search it on Google. If this error message \u2013 Problem uploading to board happens, there should be no error in your code. Problem arise from the data transfer between the board and computer. Simply unplug the board from the USB and plug it in again, and then reupload the code to the board can usually solve the problem. If it doesn't solve the problems, check the FAQ below .","title":"Error and Debugging"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#try-it-yourself-01","text":"S.O.S. Signal Write an Arduino code to light up LED PC13 on the board, sending out the S.O.S. signal. As you should know, in Morse code, S can be represented by 3 short flashes, while O is represented by 3 long flashes. Note that a LOW signal actually turn the PC13 LED on.","title":"Try it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#pinmodepin-input-digitalreadpin","text":"As mentioned before, apart from digitalWrite(pin, value) which controls the voltage output of the pin, we have digitalRead(pin) which reads the value from a specified digital pin. It will return either HIGH or LOW value, corresponding to 1 and 0. The syntax digitalRead(pin) only take 1 parameter, which is the digital pin you want to read. Before you execute digitalRead(pin) , you need to set the pin to INPUT mode first. Here is a code using both digitalRead and digitalWrite . It controls the LED on and off by pressing a button. void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( PC13 , OUTPUT ); pinMode ( PB9 , INPUT_PULLDOWN ); } void loop () { digitalWrite ( PC13 , digitalRead ( PB9 )); //delay(10); } pinMode(PB9, INPUT_PULLDOWN) As pin PC13 is used to output voltage to the LED, we will use another pin to read the input value, let\u2019s say, pin PB9. Thus, we type pinMode(PB9, INPUT_PULLDOWN) to tell the board that we want to set the mode of pin PB9 into reading inputs. digitalWrite(PC13, digitalRead(PB9)) You should remember that digitalRead(pin, value) takes 2 parameters. For value, you set it as HIGH or LOW. This value can also be provided by digitalRead(pin) , which give you exactly HIGH or LOW value. Thus, you can type digitalRead(PB9) in the 2nd parameter directly. The board will get the value of 2nd parameter for digitalWrite automatically from digitalRead. We will setup a circuit like this to let pin PB9 to read the value. The circuit starts from the 3.3V pin which constantly providing 3.3V, to the GND pin. Apart from the button, A resistor is added into the circuit. Pin PB9 is connected between the button and the resistor, so it is at 3.3V a.k.a. HIGH signal when you press the button. To implement this, you need a breadboard, a button, a resistor and several male-to-male Dupont wires prepared. Connect the components as bellows. This is a breadboard, which has holes that let you easily insert electronic components to prototype an electronic circuit, and it has inter-connection between holes as above. The circuit should be similar to the one above. Green dots on the above figure across a row in the graph above mean they are electrically connected to each other. You can now upload your new code to the board. If it works correctly, the pin PC13 LED should turn off when you press the button and turn on when you release.","title":"pinMode(pin, INPUT) &amp; DigitalRead(pin)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box_3","text":"pinMode(pin, INPUT); digitalRead(pin);","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#try-it-yourself-02","text":"Send a signal by button 1. Write an Arduino code which will light up LED 13 for 0.5 seconds when it button is pressed. The light turns off for 0.5 seconds afterwards, and then turn on again if the button is stilled pressed. 2. You should notice that a resistor is needed in the circuit. It is called a pull-down resistor . Disconnect it and see if anything is changed. Now let's change pinMode(PB9, INPUT_PULLDOWN) into: * pinMode(PB9, INPUT) * pinMode(PB9, INPUT_PULLUP) Does it still work without the pull-down resistor? You may read [Arduino_STM32/io.h at master \u00b7 rogerclarkmelbourne/Arduino_STM32](https://github.com/rogerclarkmelbourne/Arduino_STM32/blob/master/STM32F1/cores/maple/io.h) and [Input configuration on STM32F1 Reference Manual](https://www.st.com/content/ccc/resource/technical/document/reference_manual/59/b9/ba/7f/11/af/43/d5/CD00171190.pdf/files/CD00171190.pdf/jcr:content/translations/en.CD00171190.pdf#%5B%7B%22num%22%3A236%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C67%2C754%2Cnull%5D) to get to know more.","title":"Try it yourself 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#serial-write","text":"We can also display some messages from the board to the computer through serial communication. Type the code below. void setup () { // It takes some time before Blue Pill can reconnect to PC // Delay is needed when there is serial communication // Genuine Arduino does not require a delay here // add more if 1500 is not enough // Alternatively, while(!Serial); can be used after Serial.begin(9600); , which will block the program from execution until Serial Monitor is opened delay ( 1500 ); // Initiate Serial communication Serial . begin ( 9600 ); } void loop () { Serial . println ( \"Hello, World!\" ); delay ( 1000 ); // So that it wouldn't print crazily } Serial.begin(9600) For us to use the functions of the Serial library, we have to initiate serial communication \u2013 to do this we use the Serial.begin() function. Serial.begin() needs to go in the setup() . Now for reasons beyond the scope of this discussion, it is convenient to use the number 9600 in the Serial.begin() function. The value 9600 specifies the baud rate . The baud rate is the rate at which information will pass between Blue pill and the computer. Serial.println(\"Hello, World!\") This statement will print the words you type inside \"\u2026\" to the computer. Upload your code to the Blue Pill. You cannot see the words printed on the computer yet. You will need to press Ctrl+Shift+M to open the Serial Monitor. The words are printed there.","title":"Serial Write"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box_4","text":"Serial.begin(9600); Serial.println();","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#try-it-yourself-03","text":"Printing words You should notice that the program above will print the words repeatedly. Write a code that will only print once only and at least two different sentences. Apart from Serial.println() , there is also Serial.print() . Try to find out the difference between them.","title":"Try it yourself 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#serial-read","text":"In order to send information to the Blue pill, we can use Serial read. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { // Block the program from execution until there is serial input // Can be omitted if getting serial input is not necessary while ( Serial . available () == 0 ); // Read until the serial buffer is empty while ( Serial . available () > 0 ) { char reveived_byte = Serial . read (); Serial . println ( reveived_byte ); } } Press Ctrl+Shift+M to open the Serial Monitor. Type some words and then press Send . Serial.available() returns the number of bytes in the serial buffer that send from PC to blue pill. Let's say if you send Hello in the Serial Monitor, the return value will immediately change from 0 to 6, as you have just typed 6 characters. ( Why 6 characters? ) Serial.read() returns the first character from the buffer. Serial.println(reveived_byte) prints the character that it just gets.","title":"Serial read"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#section-check-box_5","text":"Serial.available() Serial.read()","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#try-it-yourself-04","text":"More than words In order to parse a integer from serial input, you may check the ASCII table and manipulate the input char . Alternatively, built-in function Serial.parseInt() can be used. Change the lines from char reveived_byte = Serial.read(); Serial.println(reveived_byte); into int reveived_int = Serial.parseInt(); Serial.println(reveived_int); How does it behave? What if your input is not an integer? What if the input I want is a float ? String ? Check Serial - Arduino Reference to find the see which function can get the job done.","title":"Try it yourself 04"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#appendix-faq","text":"Q: STM32 Boards (STM32duino.com) can not be seen under Tools \u2192 Board: <something> . A: Make sure you folder is structured like this: (Sketchbook location)\\hardware\\Arduino_STM32_master\\(some folders e.g. drivers\\ and tools\\) Q: exec: '<something>\\arm-none-eabi-g++': file does not exist A: Press Tools -> Board: <something> -> Boards Manager . Install Arduino SAM Boards . Q: <some_path>/maple_upload: line 29: <some_path>/upload-reset: No such file or directory A: This is because upload-reset is a 32-bit executable. You may verify this through file some_path>/upload-reset , which shows that it is a ELF 32-bit LSB executable . Install 32-bit shared libraries for AMD64: sudo apt install libc6-i386 . Q: built-in LED keep flashing and unable to upload code A: Press reset button and upload new code. Repeat a couple of times if it doesn't work. Notice that port name maybe changed after reset. If it still doesn't work, flash the USB bootloader again. Q: WARN src/stlink-common.c: unknown chip id! 0xa05f0000 A: USB bootloader already uploaded. In order to overwrite the USB bootloader, press reset and immediately flash the new firmware with ST-Link. Q: Access is denied on Windows. A: Don't install Arduino IDE from MS App Store. Install from Arduino official website instead. Reference: windows 10 upload \"Access is denied\" error on bluepill - Arduino for STM32 * Q: fatal error: Arduino.h: No such file or directory * A: Remove the folder C:\\Users\\(your_user_name)\\AppData\\Local\\Arduino15\\ , then install Arduino SAM Boards from Boards Manager once again. If it still doesn't work, then try not to put you Sketchbook location under \\OneDrive . * Q: Blue Pill can not be found after being plugged, or Access is denied * A: Use another USB cable. * Q: Still not found after replacing a USB cable. * A: There are other methods to upload program including using a USB-to-Serial adapter and using a ST-LINK, which can be found at M2. Check Uploading a sketch - STM32duino wiki to read how it's done. Be aware that is the USB bootloader is erased after using either one of these method, so they can no longer be programmed via USB until USB bootloader is flashed to the board once again. * Q: I found a typo in the article. * A: Please tell us.","title":"Appendix: FAQ"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#appendix-how-to-flash-usb-bootloader","text":"Download bootloader generic_boot20_pc13.bin . The version pc13 is used as the LED on blue pill is on PIN PC13. Connect the ST-Link with the Blue Pill. SWDIO , SWCLK , 3.3V and GND are the only pins required on ST-Link. Remember, DON'T provide power to the Blue pill from both ST-Link and USB. Flash the bootloader. (Linux) We may use st-flash that come along with Arduino STM32. cd /home/m2_is_neat/Arduino/hardware/Arduino_STM32-master/tools/linux64/stlink/ ( Depends on where you put sketchbook folder ) ./st-flash write /home/m2_is_neat/I_put_my_file_here/generic_boot20_pc13.bin 0x8000000 Reference: Flashing Bootloader for BluePill Boards \u00b7 rogerclarkmelbourne/Arduino_STM32 Wiki","title":"Appendix: how to flash USB bootloader"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#references","text":"Blue Pill - STM32duino wiki rogerclarkmelbourne/STM32duino-bootloader: Bootloader for STM32F103 boards, for use with the Arduino_STM32 repo and the Arduino IDE Bootloader rogerclarkmelbourne/Arduino_STM32 Wiki","title":"References"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#further-reading","text":"STM32F103C8 Datasheet , which mentioned the physical properties of STM32F103, such as hardware specifications, ratings (e.g. supply voltage, output current), pinout, suggested circuit designs and many others. STM32F1 Reference Manual , which mentioned how a STM32F1 behaves and how to use STM32F1.","title":"Further Reading"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Getting-Started-with-Arduino-IDE%29/#see-also","text":"Arduino Tutorials (Index) Learning basic programming with Arduino","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Index%29/","text":"Through these tutorials, you may learn basic electronics through Arduino . There are \" Try it Yourself \" and \" Assignment \" in the tutorials that you should follow. Basic Tutorials Getting Started with Arduino IDE Understand Arduino\u2019s hardware Start using Arduino IDE Write basic Arduino codes Learning basic programming with Arduino Know the meaning and usage of different data types Know how to use arithmetic operators, comparison operators and boolean operators Know how to use if\u2026else, for, while statements You may skip this if you are familar with C++ Timer, PWM and Interrupts Understand Timer Use PWM Use External Interrupt Use Timer Interrupt Assignment 01 Learning Basic Control Control motor\u2019s rotation speed using PWM Detect the speed of motor by speed sensor Perform a basic feedback control Assignment 02 Learning Servo and Sensors Control servo motors Read analog signal Understand analog signal reading and I2C communication protocol Take reading from different sensors Assignment 03 Communication Set up serial communication in Arduino Set up communication between Arduino and the computer via pySerial Assignment 04 Beyond Arduino Arduino IDE is easy to use, but its functionalities are limited and low-level manipulations are impossible with Arduino IDE. If you want to dig deeper on MCU and STM32, you may consider the following: * SW4STM32 is a toolchain to program STM32 with STM32Cube HAL and CMSIS, which can be integrate with Eclipse IDE with a Eclipse plug-in. * STM32Cube HAL is a hardware abstraction layer (HAL) provided by ST Microelectronics, the manufacturer of STM32. It is more easy to use than CMSIS, but ST may discontinue it whenever they like. (Just like what they have done to STM32 Peripheral Library) Controllerstech offers basic tutorials on how to program STM32 with STM32Cube HAL. * CMSIS is a HAL for the Cortex-M processor (including STM32). It is independent to MCU vendors and is considered as the hardcore way. You'll have to read the reference manuals by ST Microelectronics and manipulate the MCU by altering its registers. * STM32 can be used with Real-time OS (RTOS) , which offers functionalities such as event and multi-threading. * ChibiOS is a RTOS that has been used by M2 members for a few years. There is an article that introduces how to set up a workspace for programming ChibiOS. * Useful tool: STM32CubeMX and STM32CubeIDE but you might need a VPN to connect to their US server. * Quick Prototyping . * As Arduino boards are generally low-performance 8-bit devices, an upgrade path may be the now cheap and powerful ESP8266/ESP32 which have WiFi capabilities. * For USB emulations, a quick and cheap way is to use Arduino Micro (ATmega32U4-based) that have support in generic Arduino IDE. Advanced use can also be found. See Also Necessary Information for Electrical Trainee External Links Tutorials - Arduino References - Arduino","title":"Arduino Tutorials (Index)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Index%29/#basic-tutorials","text":"Getting Started with Arduino IDE Understand Arduino\u2019s hardware Start using Arduino IDE Write basic Arduino codes Learning basic programming with Arduino Know the meaning and usage of different data types Know how to use arithmetic operators, comparison operators and boolean operators Know how to use if\u2026else, for, while statements You may skip this if you are familar with C++ Timer, PWM and Interrupts Understand Timer Use PWM Use External Interrupt Use Timer Interrupt Assignment 01 Learning Basic Control Control motor\u2019s rotation speed using PWM Detect the speed of motor by speed sensor Perform a basic feedback control Assignment 02 Learning Servo and Sensors Control servo motors Read analog signal Understand analog signal reading and I2C communication protocol Take reading from different sensors Assignment 03 Communication Set up serial communication in Arduino Set up communication between Arduino and the computer via pySerial Assignment 04","title":"Basic Tutorials"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Index%29/#beyond-arduino","text":"Arduino IDE is easy to use, but its functionalities are limited and low-level manipulations are impossible with Arduino IDE. If you want to dig deeper on MCU and STM32, you may consider the following: * SW4STM32 is a toolchain to program STM32 with STM32Cube HAL and CMSIS, which can be integrate with Eclipse IDE with a Eclipse plug-in. * STM32Cube HAL is a hardware abstraction layer (HAL) provided by ST Microelectronics, the manufacturer of STM32. It is more easy to use than CMSIS, but ST may discontinue it whenever they like. (Just like what they have done to STM32 Peripheral Library) Controllerstech offers basic tutorials on how to program STM32 with STM32Cube HAL. * CMSIS is a HAL for the Cortex-M processor (including STM32). It is independent to MCU vendors and is considered as the hardcore way. You'll have to read the reference manuals by ST Microelectronics and manipulate the MCU by altering its registers. * STM32 can be used with Real-time OS (RTOS) , which offers functionalities such as event and multi-threading. * ChibiOS is a RTOS that has been used by M2 members for a few years. There is an article that introduces how to set up a workspace for programming ChibiOS. * Useful tool: STM32CubeMX and STM32CubeIDE but you might need a VPN to connect to their US server. * Quick Prototyping . * As Arduino boards are generally low-performance 8-bit devices, an upgrade path may be the now cheap and powerful ESP8266/ESP32 which have WiFi capabilities. * For USB emulations, a quick and cheap way is to use Arduino Micro (ATmega32U4-based) that have support in generic Arduino IDE. Advanced use can also be found.","title":"Beyond Arduino"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Index%29/#see-also","text":"Necessary Information for Electrical Trainee","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Index%29/#external-links","text":"Tutorials - Arduino References - Arduino","title":"External Links"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/","text":"Next Tutorial: Communication Objectives At the end of this self-learning lab, you should be able to: * control servo motors * read analog signal * understand analog signal reading and I2C communication protocol * take reading from different sensors Servo motor A servo motor is a rotary actuator or linear actuator that allows for precise control of angular or linear position, velocity and acceleration. Because servo motors use feedback to determine the position of the shaft, you can control that position very precisely. As a result, servo motors are used to control the position of objects, rotate objects, move legs, arms or hands of robots, move sensors etc. with high precision. Read more about servo motor from the following websites. * Servomotor - Wikipedia * How Servo Motors Work | Servo Motor Controllers * Arduino : How to Control Servo Motor With Arduino - Instrutables As Blue Pill is much more powerful than genuine Arduino, any PWM pin can be used for servo signal. You should notice that you need to use a library when you want to turn the servo motor to a designated position. The description of the library is as follows. * Servo - Arduino Yet, the angle of servo motor is just controlled by PWM, which we have learnt before. Thus, we can also write a code to make a servo motor turn without using a library. Here is an example. * Servo and PWM without library - Arduino Forum Do it yourself 01 Servo Motor Controlling Write a code which turns exactly 45 degrees and stops there. Write a code which controls the servo motor to rotate back and forth. Analog Signal Analog signal is sent and received in the form of a wave. Digital signal is the opposite of analog signal. For the graph above, the L.H.S. expresses what an analog signal looks like, while the one on the right imitates a digital signal. You can imagine there is a door, digital signal can only tell you whether the door is closed or opened, but analog signal can tell you how wide is the door opening. Receiving and sending analog signals in Arduino is as easy as tackling digital signals. Read the following sites to learn more about analog signals. * Analog vs Digital * Analog input in Arduino * IR distance sensor measurement * Build a distance sensor from scratch This is an IR distance sensor, which radiates IR light and measures the amount of IR reflected. It output analog singal with can be read by Blue Pill through any pin that support ADC . Let's connect the sensor to Blue Pill. VCC: 3.3V GND: you guese it A0: pin that support ADC const int SENSOR_PIN = PA0 ; // or any other pin you like void setup () { delay ( 1500 ); Serial . begin ( 9600 ); pinMode ( SENSOR_PIN , INPUT ); // pinMode can also be set as INPUT_ANALOG, but then it won't be able to use digitalRead() on the same pin } void loop () { Serial . println ( analogRead ( SENSOR_PIN )); delay ( 1000 ); } Unlike genuine Arduino, analogRead() here on STM32 has 12-bit resolution. You should find that the signal is lower when there is more reflected IR light. Do it yourself 03 Planet Analogue and Planet Di Gi Charat The signal can also be treated as a digital signal. Use digitalRead() and analogRead() at the same time and determine the threshold voltage that differentiate a HIGH signal from a LOW signal. I\u00b2C communication protocol I\u00b2C is a communication protocol which allows master devices to send and receive data from slave devices. Although the speed of data transmission through I\u00b2C is not very fast (~100kbits/s), it occupies a very little number of connections to establish a connection between devices. Moreover, the number of connections needed does not increase with an increase in devices. This makes I\u00b2C a very popular protocol in MCU-sensor connections. Find out more about I\u00b2C from the following websites. * I2C introduction * Arduino wire library for using I2C * I2C communication between 2 Arduino board MPU6050 is an IC with a 3-axis gyroscope, a 3-axis accelerometer and temperature sensor. It uses I\u00b2C to communicate. Here is an example code to use MPU6050: // MPU-6050 Short Example Sketch // By Arduino User JohnChi // August 17, 2014 // Public Domain #include <Wire.h> const int MPU_ADDR = 0x68 ; // I2C address of the MPU-6050 void setup () { Wire . begin (); Wire . beginTransmission ( MPU_ADDR ); Wire . write ( 0x6B ); // PWR_MGMT_1 register Wire . write ( 0 ); // set to zero (wakes up the MPU-6050) Wire . endTransmission ( true ); Serial . begin ( 9600 ); } void loop () { int16_t ac_x , ac_y , ac_z , temp , gy_x , gy_y , gy_z ; Wire . beginTransmission ( MPU_ADDR ); Wire . write ( 0x3B ); // starting with register 0x3B (ac_CEL_XOUT_H) Wire . endTransmission ( false ); Wire . requestFrom ( MPU_ADDR , 14 ); // request a total of 14 registers ac_x = Wire . read () << 8 | Wire . read (); // 0x3B (ac_CEL_XOUT_H) & 0x3C (ac_CEL_XOUT_L) ac_y = Wire . read () << 8 | Wire . read (); // 0x3D (ac_CEL_YOUT_H) & 0x3E (ac_CEL_YOUT_L) ac_z = Wire . read () << 8 | Wire . read (); // 0x3F (ac_CEL_ZOUT_H) & 0x40 (ac_CEL_ZOUT_L) temp = Wire . read () << 8 | Wire . read (); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L) gy_x = Wire . read () << 8 | Wire . read (); // 0x43 (gy_RO_XOUT_H) & 0x44 (gy_RO_XOUT_L) gy_y = Wire . read () << 8 | Wire . read (); // 0x45 (gy_RO_YOUT_H) & 0x46 (gy_RO_YOUT_L) gy_z = Wire . read () << 8 | Wire . read (); // 0x47 (gy_RO_ZOUT_H) & 0x48 (gy_RO_ZOUT_L) Serial . print ( \"Temp = \" ); Serial . print ( temp / 340.00 + 36.53 ); // equation for temperature in degrees C from datasheet Serial . print ( \" \\t Acc X = \" ); Serial . print ( ac_x ); Serial . print ( \" Y = \" ); Serial . print ( ac_y ); Serial . print ( \" Z = \" ); Serial . print ( ac_z ); Serial . print ( \" \\t Gyro X = \" ); Serial . print ( gy_x ); Serial . print ( \" Y = \" ); Serial . print ( gy_y ); Serial . print ( \" Z = \" ); Serial . println ( gy_z ); delay ( 333 ); } Further Readings Getting Started With Arduino and MPU6050 MPU6050 notes(Chinese) Do it yourself 03 MPU6050 Gyroscope * Try to detect whether the MPU6050 breakout board is tilted using the gyroscope and/or the accelerometer readings. Library What is library? It is code that written and contributed by many different people. It provides many great additional capabilities to run new and different hardware devices. The code will be inserted in your code if you add a library to your code. Find out more by yourself. * Libraries - Arduino * Installing Additional Arduino Libraries - Arduino It is possible to calculate odometry using either gyroscope or the accelerometer readings. However, accelerometer is noisy and hence is inaccurate in short term; while gyroscope drifts and hence is inaccurate over long term. Here comes Kalman Filter to save the world. It fuses different measurements over time to provide a better estimation of the value. It is a difficult topic in robotics, so understanding and using of Kalman filter is not required at this stage. Just for your reference. Understanding how the stuff works is a bit complicated for beginners. Thus, there are always geniuses which make a library by themselves. We can include the library so that values can be obtained by just calling the corresponding function. There is a Arduinolibrary for Kalman Filer: * TKJElectronics/KalmanFilter: This is a Kalman filter used to calculate the angle, rate and bias from from the input of an accelerometer/magnetometer and a gyroscope - GitHub Do it yourself 04 kalman Filter There is an Kalman Filter example on MPU6050. After installing the library, click File \u2192 Examples \u2192 Kalman Filter Library \u2192 MPU6050 and execute the code. As stop bit is not yet implemented in the Arduino STM32 Core, Wire.requestFrom(IMUAddress, nbytes, (uint8_t)true) may need to be changed into Wire.requestFrom(IMUAddress, nbytes) . Assignment 03 clickclickclick There was a game called clickclickclick.com , which players compete to make most mouse clicks in a week. People use different methods to fight for their victory. Unfortunately, it was closed in 2017, but we can still make a robot that click your mouse automatically to memorise this game. Use a servo to click a mouse automatically. As the user may want to temporarily use the mouse and move the mouse away, it should stop clicking when the mouse isn't nearby. Use a IR distance sensor to detect the presence of the mouse. You may want to use a mouse that's white in colour. It is dangerous if the robot still operate when it's falling! Stop servo action when it suspects that it is falling and restart only when there's a user reset. References SG90 Digital - Tower Pro MPU-6050 - Arduino Playground MPU6050 breakout board GY-521 Datasheet MPU6050 Datasheet Further Readings Arduino for STM32 + MPU-6050 == Improve your programming skills! - Youtube See Also Arduino Tutorials (Index) Arduino Tutorials (Interacting with Computers)","title":"Arduino Tutorials (Learning Servo and Sensors)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * control servo motors * read analog signal * understand analog signal reading and I2C communication protocol * take reading from different sensors","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#servo-motor","text":"A servo motor is a rotary actuator or linear actuator that allows for precise control of angular or linear position, velocity and acceleration. Because servo motors use feedback to determine the position of the shaft, you can control that position very precisely. As a result, servo motors are used to control the position of objects, rotate objects, move legs, arms or hands of robots, move sensors etc. with high precision. Read more about servo motor from the following websites. * Servomotor - Wikipedia * How Servo Motors Work | Servo Motor Controllers * Arduino : How to Control Servo Motor With Arduino - Instrutables As Blue Pill is much more powerful than genuine Arduino, any PWM pin can be used for servo signal. You should notice that you need to use a library when you want to turn the servo motor to a designated position. The description of the library is as follows. * Servo - Arduino Yet, the angle of servo motor is just controlled by PWM, which we have learnt before. Thus, we can also write a code to make a servo motor turn without using a library. Here is an example. * Servo and PWM without library - Arduino Forum","title":"Servo motor"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#do-it-yourself-01","text":"Servo Motor Controlling Write a code which turns exactly 45 degrees and stops there. Write a code which controls the servo motor to rotate back and forth.","title":"Do it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#analog-signal","text":"Analog signal is sent and received in the form of a wave. Digital signal is the opposite of analog signal. For the graph above, the L.H.S. expresses what an analog signal looks like, while the one on the right imitates a digital signal. You can imagine there is a door, digital signal can only tell you whether the door is closed or opened, but analog signal can tell you how wide is the door opening. Receiving and sending analog signals in Arduino is as easy as tackling digital signals. Read the following sites to learn more about analog signals. * Analog vs Digital * Analog input in Arduino * IR distance sensor measurement * Build a distance sensor from scratch This is an IR distance sensor, which radiates IR light and measures the amount of IR reflected. It output analog singal with can be read by Blue Pill through any pin that support ADC . Let's connect the sensor to Blue Pill. VCC: 3.3V GND: you guese it A0: pin that support ADC const int SENSOR_PIN = PA0 ; // or any other pin you like void setup () { delay ( 1500 ); Serial . begin ( 9600 ); pinMode ( SENSOR_PIN , INPUT ); // pinMode can also be set as INPUT_ANALOG, but then it won't be able to use digitalRead() on the same pin } void loop () { Serial . println ( analogRead ( SENSOR_PIN )); delay ( 1000 ); } Unlike genuine Arduino, analogRead() here on STM32 has 12-bit resolution. You should find that the signal is lower when there is more reflected IR light.","title":"Analog Signal"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#do-it-yourself-03","text":"Planet Analogue and Planet Di Gi Charat The signal can also be treated as a digital signal. Use digitalRead() and analogRead() at the same time and determine the threshold voltage that differentiate a HIGH signal from a LOW signal.","title":"Do it yourself 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#i2c-communication-protocol","text":"I\u00b2C is a communication protocol which allows master devices to send and receive data from slave devices. Although the speed of data transmission through I\u00b2C is not very fast (~100kbits/s), it occupies a very little number of connections to establish a connection between devices. Moreover, the number of connections needed does not increase with an increase in devices. This makes I\u00b2C a very popular protocol in MCU-sensor connections. Find out more about I\u00b2C from the following websites. * I2C introduction * Arduino wire library for using I2C * I2C communication between 2 Arduino board MPU6050 is an IC with a 3-axis gyroscope, a 3-axis accelerometer and temperature sensor. It uses I\u00b2C to communicate. Here is an example code to use MPU6050: // MPU-6050 Short Example Sketch // By Arduino User JohnChi // August 17, 2014 // Public Domain #include <Wire.h> const int MPU_ADDR = 0x68 ; // I2C address of the MPU-6050 void setup () { Wire . begin (); Wire . beginTransmission ( MPU_ADDR ); Wire . write ( 0x6B ); // PWR_MGMT_1 register Wire . write ( 0 ); // set to zero (wakes up the MPU-6050) Wire . endTransmission ( true ); Serial . begin ( 9600 ); } void loop () { int16_t ac_x , ac_y , ac_z , temp , gy_x , gy_y , gy_z ; Wire . beginTransmission ( MPU_ADDR ); Wire . write ( 0x3B ); // starting with register 0x3B (ac_CEL_XOUT_H) Wire . endTransmission ( false ); Wire . requestFrom ( MPU_ADDR , 14 ); // request a total of 14 registers ac_x = Wire . read () << 8 | Wire . read (); // 0x3B (ac_CEL_XOUT_H) & 0x3C (ac_CEL_XOUT_L) ac_y = Wire . read () << 8 | Wire . read (); // 0x3D (ac_CEL_YOUT_H) & 0x3E (ac_CEL_YOUT_L) ac_z = Wire . read () << 8 | Wire . read (); // 0x3F (ac_CEL_ZOUT_H) & 0x40 (ac_CEL_ZOUT_L) temp = Wire . read () << 8 | Wire . read (); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L) gy_x = Wire . read () << 8 | Wire . read (); // 0x43 (gy_RO_XOUT_H) & 0x44 (gy_RO_XOUT_L) gy_y = Wire . read () << 8 | Wire . read (); // 0x45 (gy_RO_YOUT_H) & 0x46 (gy_RO_YOUT_L) gy_z = Wire . read () << 8 | Wire . read (); // 0x47 (gy_RO_ZOUT_H) & 0x48 (gy_RO_ZOUT_L) Serial . print ( \"Temp = \" ); Serial . print ( temp / 340.00 + 36.53 ); // equation for temperature in degrees C from datasheet Serial . print ( \" \\t Acc X = \" ); Serial . print ( ac_x ); Serial . print ( \" Y = \" ); Serial . print ( ac_y ); Serial . print ( \" Z = \" ); Serial . print ( ac_z ); Serial . print ( \" \\t Gyro X = \" ); Serial . print ( gy_x ); Serial . print ( \" Y = \" ); Serial . print ( gy_y ); Serial . print ( \" Z = \" ); Serial . println ( gy_z ); delay ( 333 ); }","title":"I\u00b2C communication protocol"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#further-readings","text":"Getting Started With Arduino and MPU6050 MPU6050 notes(Chinese)","title":"Further Readings"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#do-it-yourself-03_1","text":"MPU6050 Gyroscope * Try to detect whether the MPU6050 breakout board is tilted using the gyroscope and/or the accelerometer readings.","title":"Do it yourself 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#library","text":"What is library? It is code that written and contributed by many different people. It provides many great additional capabilities to run new and different hardware devices. The code will be inserted in your code if you add a library to your code. Find out more by yourself. * Libraries - Arduino * Installing Additional Arduino Libraries - Arduino It is possible to calculate odometry using either gyroscope or the accelerometer readings. However, accelerometer is noisy and hence is inaccurate in short term; while gyroscope drifts and hence is inaccurate over long term. Here comes Kalman Filter to save the world. It fuses different measurements over time to provide a better estimation of the value. It is a difficult topic in robotics, so understanding and using of Kalman filter is not required at this stage. Just for your reference. Understanding how the stuff works is a bit complicated for beginners. Thus, there are always geniuses which make a library by themselves. We can include the library so that values can be obtained by just calling the corresponding function. There is a Arduinolibrary for Kalman Filer: * TKJElectronics/KalmanFilter: This is a Kalman filter used to calculate the angle, rate and bias from from the input of an accelerometer/magnetometer and a gyroscope - GitHub","title":"Library"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#do-it-yourself-04","text":"kalman Filter There is an Kalman Filter example on MPU6050. After installing the library, click File \u2192 Examples \u2192 Kalman Filter Library \u2192 MPU6050 and execute the code. As stop bit is not yet implemented in the Arduino STM32 Core, Wire.requestFrom(IMUAddress, nbytes, (uint8_t)true) may need to be changed into Wire.requestFrom(IMUAddress, nbytes) .","title":"Do it yourself 04"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#assignment-03","text":"clickclickclick There was a game called clickclickclick.com , which players compete to make most mouse clicks in a week. People use different methods to fight for their victory. Unfortunately, it was closed in 2017, but we can still make a robot that click your mouse automatically to memorise this game. Use a servo to click a mouse automatically. As the user may want to temporarily use the mouse and move the mouse away, it should stop clicking when the mouse isn't nearby. Use a IR distance sensor to detect the presence of the mouse. You may want to use a mouse that's white in colour. It is dangerous if the robot still operate when it's falling! Stop servo action when it suspects that it is falling and restart only when there's a user reset.","title":"Assignment 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#references","text":"SG90 Digital - Tower Pro MPU-6050 - Arduino Playground MPU6050 breakout board GY-521 Datasheet MPU6050 Datasheet","title":"References"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#further-readings_1","text":"Arduino for STM32 + MPU-6050 == Improve your programming skills! - Youtube","title":"Further Readings"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-Servo-and-Sensors%29/#see-also","text":"Arduino Tutorials (Index) Arduino Tutorials (Interacting with Computers)","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/","text":"Prerequisite: Learning basic soldering skills Next Tutorial: Arduino Tutorials (Learning Servo and Sensors) Objectives At the end of this self-learning lab, you should be able to: * control motor\u2019s rotation speed using PWM * detect the speed of motor by speed sensor * perform a basic feedback control 5V DC Motor A DC motor (Direct Current motor) is the most common type of motor. DC motors normally have just two leads, one positive and one negative. If you connect these two leads directly to a battery, the motor will rotate. If you switch the leads, the motor will rotate in the opposite direction. For a simple demonstration, connect the motor to the 5V pin and GND pin on Blue Bill directly. You should have soldered the wire to the motor beforehand. The motor is directly drawing current from your PC, so please try it for a few seconds only . Code is not required for the motor to run. The 5V pin will output the voltage continuously without any code. You can reverse the two wires connected to the motor so the motor will turn in another direction. Try it yourself 01 Fail attempt Plug in the wires of the motor to GPIOs on Blue Pill, and try to control it using digitalWrite() . Why doesn't it work ? L298N Motor Driver Module L298N is a dual full bridge driver designed to accept digital signals and drive inductive loads like DC motors. Here is a popular L298N module that can drive up to 2 motors. Check the instructions to see how it works. * L298N Dual H-Bridge Motor Driver User Guide * Control DC and Stepper Motors With L298N Dual Motor Controller Modules and Arduino: 3 Steps - Instructables Note that if you are using an external power supply, there should be a common ground connecting the power supply, L298N drive and Blue Pill. Section Check Box: How to provide power to L298N driver Module How to connect the motors to L298N driver Module Try it yourself 02 Need for Speed Instead of digital signal, applied the L298N driver with PWM signal. Try to control the speed of the motor. Check the supplied voltage to the DC motor using a multimeter. You may notice that the motor doesn't rotate under a certain voltage level. Find out the voltage needed to turn on the motor. Why doesn't it move ? Speed Sensor Speed sensors are used to detect the speed of a device moving or rotating. There are many kinds of speed sensors. In this lab, we will use LM393, which is a simple photo-resistor light sensor that has both analog and digital outputs. The digital output has a trim potentiometer that can be used to set a trigger light level. You will also need to use the encoder disc above, placing inside the gap of the speed sensor. Thus, when the disk rotates, the speed sensor can detect the rotation. Do it yourself 03 Motor speed sensing Connect the encoder disc and speed sensor to the motor, and connect the digital pin of speed sensor to Blue Pill. Use digitalRead() and rotate the motor manually to observe how it behaves. Drive the motor with the board and write a code to measure the Revolutions Per Minute (RPM) of the motor. You may use interrupt to count the number of or with the help of built-in function pulseIn() . Feedback control In order to control the speed of the motor, you can: 1. Apply a certain voltage to the motor. 2. Measure the speed of the motor and calculate the error, i.e. the difference between the desired speed and the actual speed. 3. Increase the supplied voltage if the speed is too low, vice versa. It may be more responsive if the adjustment is proportional to the error. 4. Repeat 2 - 3. This is called a negative feedback control . (The same as the one you learnt in secondary school biology) This method we have used is called proportional control . Do it yourself 04 I have complete control Write a code that can control the motor to rotate at around 100 RPM. Apply some resistance over the motor. How does the supplied voltage level changed? Can it maintain at 100 RPM? PID controller Proportional control is a primitive control method and has many problems: * Slow response time * Unable to reach target * Overshoot and oscillate There is another control method called PID control . It takes account of the proportional, integral, and derivative terms of the error. Our measurement here is slow and inaccurate, so PID control doesn't perform well here. However, it's better to learn more about this: PID controller - Wikipedia Improving the Beginner\u2019s PID \u2013 Introduction - Project Blog PIDLibrary - Arduino Playground Assignment 02 You accidentally made a servo motor Write a code that can control motor speed. It should: * Read desired speed from serial input (continuously) and rotate the motor at the desired speed. * Print the value of currently supplied voltage and RPM of the motor. See Also Arduino Tutorials (Index) Arduino Tutorials (Learning Servo and Sensors)","title":"Arduino Tutorials (Learning basic control)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * control motor\u2019s rotation speed using PWM * detect the speed of motor by speed sensor * perform a basic feedback control","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#5v-dc-motor","text":"A DC motor (Direct Current motor) is the most common type of motor. DC motors normally have just two leads, one positive and one negative. If you connect these two leads directly to a battery, the motor will rotate. If you switch the leads, the motor will rotate in the opposite direction. For a simple demonstration, connect the motor to the 5V pin and GND pin on Blue Bill directly. You should have soldered the wire to the motor beforehand. The motor is directly drawing current from your PC, so please try it for a few seconds only . Code is not required for the motor to run. The 5V pin will output the voltage continuously without any code. You can reverse the two wires connected to the motor so the motor will turn in another direction.","title":"5V DC Motor"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#try-it-yourself-01","text":"Fail attempt Plug in the wires of the motor to GPIOs on Blue Pill, and try to control it using digitalWrite() . Why doesn't it work ?","title":"Try it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#l298n-motor-driver-module","text":"L298N is a dual full bridge driver designed to accept digital signals and drive inductive loads like DC motors. Here is a popular L298N module that can drive up to 2 motors. Check the instructions to see how it works. * L298N Dual H-Bridge Motor Driver User Guide * Control DC and Stepper Motors With L298N Dual Motor Controller Modules and Arduino: 3 Steps - Instructables Note that if you are using an external power supply, there should be a common ground connecting the power supply, L298N drive and Blue Pill.","title":"L298N Motor Driver Module"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#section-check-box","text":"How to provide power to L298N driver Module How to connect the motors to L298N driver Module","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#try-it-yourself-02","text":"Need for Speed Instead of digital signal, applied the L298N driver with PWM signal. Try to control the speed of the motor. Check the supplied voltage to the DC motor using a multimeter. You may notice that the motor doesn't rotate under a certain voltage level. Find out the voltage needed to turn on the motor. Why doesn't it move ?","title":"Try it yourself 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#speed-sensor","text":"Speed sensors are used to detect the speed of a device moving or rotating. There are many kinds of speed sensors. In this lab, we will use LM393, which is a simple photo-resistor light sensor that has both analog and digital outputs. The digital output has a trim potentiometer that can be used to set a trigger light level. You will also need to use the encoder disc above, placing inside the gap of the speed sensor. Thus, when the disk rotates, the speed sensor can detect the rotation.","title":"Speed Sensor"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#do-it-yourself-03","text":"Motor speed sensing Connect the encoder disc and speed sensor to the motor, and connect the digital pin of speed sensor to Blue Pill. Use digitalRead() and rotate the motor manually to observe how it behaves. Drive the motor with the board and write a code to measure the Revolutions Per Minute (RPM) of the motor. You may use interrupt to count the number of or with the help of built-in function pulseIn() .","title":"Do it yourself 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#feedback-control","text":"In order to control the speed of the motor, you can: 1. Apply a certain voltage to the motor. 2. Measure the speed of the motor and calculate the error, i.e. the difference between the desired speed and the actual speed. 3. Increase the supplied voltage if the speed is too low, vice versa. It may be more responsive if the adjustment is proportional to the error. 4. Repeat 2 - 3. This is called a negative feedback control . (The same as the one you learnt in secondary school biology) This method we have used is called proportional control .","title":"Feedback control"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#do-it-yourself-04","text":"I have complete control Write a code that can control the motor to rotate at around 100 RPM. Apply some resistance over the motor. How does the supplied voltage level changed? Can it maintain at 100 RPM?","title":"Do it yourself 04"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#pid-controller","text":"Proportional control is a primitive control method and has many problems: * Slow response time * Unable to reach target * Overshoot and oscillate There is another control method called PID control . It takes account of the proportional, integral, and derivative terms of the error. Our measurement here is slow and inaccurate, so PID control doesn't perform well here. However, it's better to learn more about this: PID controller - Wikipedia Improving the Beginner\u2019s PID \u2013 Introduction - Project Blog PIDLibrary - Arduino Playground","title":"PID controller"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#assignment-02","text":"You accidentally made a servo motor Write a code that can control motor speed. It should: * Read desired speed from serial input (continuously) and rotate the motor at the desired speed. * Print the value of currently supplied voltage and RPM of the motor.","title":"Assignment 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-control%29/#see-also","text":"Arduino Tutorials (Index) Arduino Tutorials (Learning Servo and Sensors)","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/","text":"Next Tutorial: Timer, PWM and Interrupts Objectives At the end of this self-learning lab, you should be able to: * Know the meaning and usage of different data types * Know how to use arithmetic operators, comparison operators and boolean operators * Know how to use if\u2026else, for, while statements Things you need A computer with Arduino IDE Your brain, as you are going to learn a new programming language (C++)! Variables A variable is a way of naming and storing a value for later use by the program, such as data from a sensor or an intermediate value used in a calculation. Before variables are used, all of them have to be declared. * When declaring a variable, we can choose\u2026 * Variable type * Variable name (the identifier of the variable) * Initial value (optional) * For example -> int width = 5; * int is the variable type * width is the identifier (variable name) * 5 is the assigned value * Variable Type * It tells the Arduino board the size of storage needed to store the data * Some basic variable types in Arduino Name Description Range int Integers -32,768 to 32,767 long extended size variables for integer storage -2,147,483,648 to 2,147,483,647 boolean Boolean value 0 or 1 float A number that has a decimal point 3.4028235E+38 double Same as float in Arduino UNO string storing text, enclosed by \"\u2026\" Identifier (variable name) An identifier must start with either a letter (i.e., A to Z, and a to z), or the underscore symbol (i.e., _) The rest of the character may be letters (i.e., A to Z, and a to z), digits (i.e., 0 to 9), or The underscore symbol (i.e., _) Arduino is case-sensitive so radius, RADIUS, Radius, etc., are different A declaration specifies a type, and contains a list of one or more variables of that type Syntax: variable type variable name; variable type variable name1, variable name2, \u2026; Example: int distance, weight; String saysth; boolean win; A variable may be initialized in its declaration by using an equal sign followed by a value Example: int distance = 5, weight = 10; String saysth = \"Hello\" ; boolean win = true; A variable that has not been given a value is said to be uninitialized, and will contain some garbage value. Using uninitialized variables in computations will give unexpected results, and thus should be avoided. Here is an example regarding variables. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); String saysth = \"Hello\" ; int distance = 5 , weight = 10 ; Serial . println ( saysth ); Serial . println ( distance ); Serial . println ( weight ); } void loop () { } In addition to a sentence enclosed by \"\u2026\" in Serial.println(), variables can also place inside for output. It is very useful in debugging. Section Check Box: Variable type: boolean , int , long , float , double , String Identifier (variable name) Initialization of variables Try it yourself 01 Variable type \u2013 char There is also a variable type called char which has not been introduced before. Try to find out yourself what is char and how to declare a variable of char . Try to print the word Hello in a line by using char . Try it yourself 02 Constants Instead of variables, we may also want to assign a fixed value to an identifier and don\u2019t want to change its value anymore. Please search from the web to find out how to declare the variable as a constant, what is the use of it and what will happen if you change the value of the constant. Operators Sometimes we want to combine variables to product new values or solve mathematical formulas. This can be done in Arduino through operands and operators. Operand Data on which the computation is performed May be variable or constant Operator Specifies what is to be done on the operands Including arithmetic operators, relational operators, logical operators, increment and decrement operators, Assignment operators e.g. \u2014 radius + 2 x 3 radius, 2 & 3 are operands & x are opeartors Arithmetic operators Modulus operator produces the remainder e.g. 10 % 3 equals 1 Integer division will discard any fractional part e.g. 10 / 3 equals 3 Arthmetic Operators Sign in the expression Addition + Subtraction - Multiplication * Division / Modulus % Try it yourself 03 Remainder We know that remainder is got from division of 2 integers. What will happen if we use the Modulus operators on the variable type double ? Please try to find it out. Relational operators If the relation is true between 2 values (E.g. 15 > 8), the numeric value of the relation is 1, and 0 if the relation is false. Relational Operators Sign in the expression Greater than > Greater than or equal >= Smaller than < Smaller than or equal <= Equal == Not equal != Try it yourself 04 Relations What are the outputs of the following programs? * Serial.println(19 >= 8); * Serial.println(\u201cstr\u201d == \u201cstr\u201d); * Serial.println(3.14*100 != 314); Logical operators x && y is true if and only if both x and y are true x || y is true if either x or y is true !x is true if x is false originally, and is false if x is originally true Logical Operators Sign in the expression And && Or || Not ! Try it yourself 05 How\u2019s your logic What are the outputs of the following programs? * Serial.println(5 > 6 || 5 >= 3); * Serial.println(5 + 6 && 5 / 6); * Serial.println(!18); * Serial.println(5 && 6 || 7 && 8); Increment and decrement operators Increment operator ++ adds 1 to its operand i.e. sth++ is equivalent to sth=sth+1 ecrement operator -- subtracts 1 from its operand i.e. sth-- is equivalent to sth=sth-1 The operators ++ and -- may be used either as prefix (e.g., ++sth) or postfix (e.g., sth++) operators Assignment Operators Sign in the expression Increment ++ Decrement -- Try it yourself 06 sth++ & ++sth As said above, sth++ has the same effect as ++sth. However, there is one point that is different between them, which sometimes leads to unexpected results in the program. Try to find out what is the difference. You can test it through the following program. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { int a = 5 , b = 6 ; Serial . println ( a ++ >= 6 ); a = 5 ; // reset the value of a Serial . println ( ++ a >= 6 ); } Assignment operators Using = will assign the value on the R.H.S. to the variable in the L.H.S. a += 2 is equivalent to a = a + 2 , same as others Assignment Operators Sign in the expression Assignment = Addition += Subtraction -= Multiplication *= Division /= Try it yourself 07 a *= 5 + 1 What is the value of a after the operation above? Assuming original value of a is 10. Is it equal to a=a*5 = 50 , then adding the 1 back? Or equals to a=a*(5+1) which is 60? Assign a name to a Pin Usually, we would like to give names to the pins we use in Arduino board to avoid confusion. In Lab 1, we have learnt to use the pin by typing the pin number directly. We can also give a name to the pin before we use it. There are mainly 3 methods of naming a pin and the naming should be placed before the setup() function. #define FIRST_PIN PA0 int SECOND_PIN = PA1 ; const int THIRD_PIN = PA2 ; void setup () { pinMode ( FIRST_PIN , OUTPUT ); pinMode ( SECOND_PIN , OUTPUT ); pinMode ( THIRD_PIN , OUTPUT ); } void loop () { } Can you figure out the differences among them? * Constants - C++ Tutorials * #define versus const dataType dataName [ - C++ Forum It is encouraged to named constants with UPPER_CASE_WITH_UNDERSCORES . Read Naming conventions for more details. Section Check Box: Operand & Operator Arithmetic operators +, -, *, /, % Relational operators >, >=, <, <=, ==, != Logical operators &&, ||, ! Increment and decrement operators ++, -- Assignment operators =, +=, -=, *=, /= Naming a pin Try it yourself 08 Precedence & Associativity In the exercise above, you should find out that what operator is carried out first will dictate the value. There are a list showing which operation has a higher priority. In evaluating an expression with mixed operators, those operators with a higher priority will be carried out before those with a lower priority. How about operations with the same priority? It is determined by the Associativity rule. Yet, the order of evaluation may be overridden by inserting parentheses () into the expressions. Operators Associativity Precedence ! Highest *, /, % left to right +, - left to right <, <=, >, >= left to right ==, != left to right && left to right || left to right =, +=, -=, *=, /=, %= right to left Lowest To ensure that you understand this, let\u2019s try to do some exercise. What is the value of the programs below? * 6 * 3 / 4 * 5 * 2 * ( 3 + 4 ) * 1 + 2 / 3 * 4 + 5 Flow of Control In programs, it is often necessary to alter the order in which statements are executed and determine whether a statement should be executed or not. The order in which statements are executed is often referred to as flow of control. Flow of control can be divided into branching and looping. Branching includes if-else statement and switch statement. Looping includes while statement and for statement. If-else statement if ( boolean_expression ) yes_statement ; else no_statement ; * Boolean expression is an expression in a programming language that produces a Boolean value when evaluated, i.e. one of true or false. * When an if-else statement is executed, the boolean_expression will be first evaluated * If it is true, yes_statement will be executed * If it is false, no_statement will be executed void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { int a = 5 ; if ( a > 2 ) Serial . println ( \"a is larger than 2\" ); else Serial . println ( \"a is not larger than 2\" ); } Compound Statements It is possible to execute more than one statement in each branch of an if-else statement by using compound statements A compound statement is simply a list of statements enclosed within a pair of braces {} Here is an example in Arduino: void setup () { delay ( 1000 ); Serial . begin ( 9600 ); int a = 4 , b = 8 , c = 4 ; if ( a > 2 ) { Serial . println ( \"a is larger than 2\" ); b = - b - sqrt ( b * b - 4 * a * c ) / ( 2 * a ); Serial . println ( b ); Serial . println ( \"Peter is cool\" ); } else { Serial . println ( \"a is not larger than 2\" ); b = - b - sqrt ( b * b - 4 * a * c ) / ( 2 * a ); Serial . println ( b ); Serial . println ( \"Peter is an idiot\" ); } } void loop () { } Try it yourself 09 If-else problem Consider the following program: void setup () { delay ( 1000 ); Serial . begin ( 9600 ); int a = 5 ; if ( a >= 5 ) { a -- ; Serial . println ( \"write sth\" ); } else { Serial . println ( \"write sth else\" ); } } void loop () { } As a>=5 originally, if statement will be executed, which is a-- . Now a is not larger than or equal to 5. Will the else statement be executed? Try it yourself 10 Multi-way if-else Statement Sometimes we want to make several choices in one if-else statement. For example, if a<=5, then do something. If 5<a<8, do another thing. If a>=8, do other tasks. This can be done using \u201celse if\u201d statement. Find out more about it by yourself. Also, consider the following case: void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 6 , b = 1 ; boolean result ; if ( a > 3 ) result = true ; else if ( a % 2 == 0 ) b -- ; else result = false ; Serial . println ( result ); } void loop () { } As a > 3, if statement will be executed. Yet, else if statement is also satisfied in this case. Will the else if statement be executed? Try to find out the answer by yourself. Switch statement A multi-way branching action can also be achieved using a switch statement switch ( controlling_variable ){ case value1 : statements ; break ; case value2 : statements ; break ; \u2026 default : default_statements ; } The value given after the case keywords are checked in order until the first that equals the value of the controlling variable is found, and then the following statement(s) are executed If none of the constants matches the value of the controlling variable, then the default statement(s) are executed The controlling variable in a switch statement must be an integer ( int ), boolean ( bool ), or a character ( char ) Try it yourself 11 Multi-variables in controlling variable Sometimes, we want to determine the relation between 2 variables. Can we write a code like this? If not, how to fix it? void setup () { } void loop () { int a = 25 , b = 14 ; int result = 0 ; switch ( a * b ){ case ( a * b > 100 ) : result = 111 ; break ; case ( a % b == 0 ) : result = 101 ; break ; default : result = 100 ; } } You should notice that there is a statement break; after the statement of each case. Find out what is it and why the line after default statement do not need to add the break statement? while loop while ( boolean_expression ) { statement_1 ; statement_2 ; ... statement_n ; } * When a while statement (aka while loop) is executed, the boolean_expression is evaluated. * If it is true, the loop body is executed once (i.e., one iteration) * If it is false, the loop ends without executing its body * After each iteration, the boolean_expression will be evaluated again and the process repeats. * While loop is used when we want to repeat some statements again and again as long as the specified condition is true. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 5 ; while ( a < 10 ) { Serial . println ( a ); a ++ ; } } void loop () { } As long as a < 10, the value of a will be printed. Try it yourself 12 Recursion using while Write a program that prints the first 100 odd numbers starting from 1. Write a program that prints the first 20 square numbers. For loop We will usually want to end the loop after several iterations or after a specific condition. Apart from counting the iterations in while loop, we can also use for loop which is more convenient to use. for ( initialization ; condition ; updating ) { statement_1 ; statement_2 ; ... statement_n ; } When a for loop is executed * The initialization is performed to set the initial value of the loop variable * The initialization is executed only once * The condition is checked * If it is true, the loop body is executed once (i.e. one iteration) * If it is false, the loop ends without executing its body * After each iteration, the updating of loop variable is performed and the condition is checked again to determine whether a new iteration starts void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 5 ; for ( int i = 0 ; i < 20 ; i ++ ) { a *= 2 ; } Serial . println ( a ); } void loop () { } In the program above, the value of a will be doubled for 20 times. It will end when the value of i reaches 20. Try it yourself 13 Recursion using for Write a program that calculates the sum of odd numbers between 1 and 20 Write a program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 (both included). Loop inside a loop Sometimes, we many want to perform iterations inside a loop. It is allowed in Arduino, just like the program below. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 10 ; j > 0 ; j -- ) { a += i + j ; } } Serial . println ( a ); } void loop () { } Try it yourself 14 Recursion using for (2) Write a program to construct the following pattern, using a nested for-loop. * * * * * * * * * * * * * * * * * * * * * * * * * Write a program to print the Fibonacci Sequence starting from 1 till the maximum value smaller than 1000. Section Check Box: if-else statement switch statement while statement for statement Try it yourself 15 break & continue We may want to exit a loop or start a new iteration immediately without executing the remaining statements in the loop in some situations. This can be done by using break and continue . Try to find out how to use them and what is the difference between them. Write the following program using break and continue . * Print the first 50 even numbers using continue * Initiate a to be 5. Add 1, then 2\u2026 until the value of a exceed 1000 by using break . Scope of variables & global variables The scope of a variable is the portion of a program in which the variable can be used. A variable cannot be used beyond its scope. * The scope of a local variable starts from its declaration up to the end of the block (delimited by a pair of braces { }). * Variables can be declared with the same identifier as long as they have different scopes. Variables in an inner block will hide any identically named variables in outer blocks. However, this is confusing and should be avoided. Global variable is a variable declared outside all functions. Local variable is a variable declared within a function. * Global variables can be accessed by all functions. * Global variables remain in existence permanently. * Global variables should be avoided in ordinary programming as they can be changed by several functionsare and hence very hard to trace. However, it is inevitable in Arduino as it is the only way to store states across loop(). * It is encouraged to named a global variables with under_scored and a leading g_ added, e.g. g_my_variable . Read Naming conventions for more details. Try it yourself 16 What's the output of the program? Why it behave like that? int first_int = 1 , second_int = 1 ; // Global variables void setup () { delay ( 1500 ); Serial . begin ( 9600 ); { int first_int = 2 ; // Local variable in a inner block second_int = 2 ; Serial . print ( \"inside a block: \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); } int first_int = 3 ; // Local variable second_int = 3 ; Serial . print ( \"inside setup(): \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); } void loop () { Serial . print ( \"outside setup(): \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); delay ( 10000 ); } Array Array a collection of data of the same type. Similar to list in Python but with a fixed size. * Syntax: dateType identifier[array_size]; e.g. int my_int_array[5]; * Array can be initialized in its declaration by using an equal sign followed by a list of values enclosed within a pair of braces. e.g. int my_int_array[5] = {1, 2, 3, 4, 5}; * Each element of an array can be regarded as a variable of the base type, which can be accessed through identifier[index] . e.g. my_int_array[0] = 100; , Serial.println(my_int_array[1]); * Array indexes always start from 0 and end with the integer that is one less than the size of the array. . NEVER * access beyond the size of the array. e.g. if the size of my_int_array is 5, reading or writing my_int_array[5] and beyond has a unpredictable behaviour. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int int_list [ 5 ] = { 1 , 3 , 5 , 7 , 9 }; for ( int i = 0 ; i < 5 ; i ++ ) Serial . println ( int_list [ i ]); int_list [ 0 ] = 2 ; int_list [ 4 ] = 11 ; for ( int i = 0 ; i < 5 ; i ++ ) Serial . println ( int_list [ i ]); } void loop () { } Try it yourself 17 Initialize a char array with Hello, World! as its content and print it. Note: A char array is also called a \"C-style string\", as there's no String in C. Read and print serial input using a C-style string. Note: serial input (and generally every C-style string) end with a '\\0'. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { char input_string [ 20 ]; int input_string_idx = 0 ; while ( Serial . available () == 0 ); while ( Serial . available () > 0 ) { input_string [ input_string_idx ] = Serial . read (); input_string_idx ++ ; if ( input_string_idx >= 20 ) break ; } for ( int i = 0 ; i < 20 ; i ++ ){ if ( input_string [ i ] == '\\0' ) break ; Serial . print ( input_string [ i ]); } Serial . println (); } 2D Array It is possible to have an array of array (a.k.a. 2D array). void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int always_equal_15 [ 3 ][ 3 ] = {{ 2 , 7 , 6 },{ 9 , 5 , 1 },{ 4 , 3 , 8 }}; for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ Serial . print ( always_equal_15 [ i ][ j ]); Serial . print ( ' ' ); } Serial . println (); } } void loop () { } Try it yourself 18 Try to flip always_equal_15 over its diagonal when printing it out. Functions In Arduino, sub-tasks can be implemented as functions. A function is a group of statements that is executed when it is called from some point in program. A program is composed of a collection of functions. When a program is put into execution, it always starts at the setup function and loop function, which may in turn call other functions. Check out the following code: int my_function ( int my_arg ) { if ( my_arg >= 0 ) { return my_arg ; } else { return 0 ; } } void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } int a = 5 ; void loop () { Serial . println ( my_function ( a )); a -- ; delay ( 1000 ); } Function appears in the following form: return_type function_name ( type1 parameter1 , type2 parameter2 , ... ) { // variable declarations ... // executable statements ... } In the above code, \u201cmy_function\u201d is a function. It has return type \u201cint\u201d, one parameter which is \u201cmy_arg\u201d, \u201cmy_arg\u201d has a variable type \u201cint\u201d. Function Call A function call (i.e., the process of calling a function) is made using the function name with the necessary parameters. A function call is itself an expression, and can be put in any places where an expression is expected. The statement: function(a) is a function call. return The value returned by the function is determined when the function executes a return statement A return statement consists of the keyword return followed by an expression When a return statement is executed the function call ends Thus, in the above code, if a>100, then the return statement is executed. Parameters and Arguments Parameters are variables that are part of the function definition The expressions used to pass values to a function during a function call are referred to as arguments When a function is called the computer substitutes the first argument with the first parameter, the second argument with the second parameter, and so forth The arguments used in a function call can be constants, variables, expressions, or even function calls In above code, \u201cmy_arg\u201d is the parameter and \u201cint\u201d is its type. Thus, digitalWrite(pin,value), pinMode(pin, value) etc. are all functions, though the function itself is hidden from you. void Functions In some situations, a function returns no value In this case, we use the void type specifier A function with no return value is called a void function The return statement in a void function does not specify any return value. It is used to return the control to the calling function If a return statement is missing in a void function, the control will be returned to the calling function after the execution of the last statement in the function Read more from Function Declaration - Arduino Section Check Box: function function call return parameter void Try it yourself 19 Functions Try to write a function that can calculate addition, subtraction, multiplication and division at once. double calculator ( double a , char sign , double b ){ // write you code here... } void setup () { Serial . begin ( 9600 ); Serial . println ( calculator ( 3.14 , '+' , 3.14 )); // 6.28 Serial . println ( calculator ( 3.14 , '-' , 3.14 )); // 0 Serial . println ( calculator ( 6 , '*' , 7 )); // 42 Serial . println ( calculator ( 1 , '/' , 0 )); // what will happen? } void loop () { } What is the problem of the following code? Can you correct it? void setup () { Serial . begin ( 9600 ); double a = 15.1 ; func ( a ); } double func ( int val ){ return a * 13.1 ; } void loop () { } See Also Arduino Tutorials (Index) Arduino Tutorials (Learning basic control)","title":"Arduino Tutorials (Learning basic programming with Arduino)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * Know the meaning and usage of different data types * Know how to use arithmetic operators, comparison operators and boolean operators * Know how to use if\u2026else, for, while statements","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#things-you-need","text":"A computer with Arduino IDE Your brain, as you are going to learn a new programming language (C++)!","title":"Things you need"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#variables","text":"A variable is a way of naming and storing a value for later use by the program, such as data from a sensor or an intermediate value used in a calculation. Before variables are used, all of them have to be declared. * When declaring a variable, we can choose\u2026 * Variable type * Variable name (the identifier of the variable) * Initial value (optional) * For example -> int width = 5; * int is the variable type * width is the identifier (variable name) * 5 is the assigned value * Variable Type * It tells the Arduino board the size of storage needed to store the data * Some basic variable types in Arduino Name Description Range int Integers -32,768 to 32,767 long extended size variables for integer storage -2,147,483,648 to 2,147,483,647 boolean Boolean value 0 or 1 float A number that has a decimal point 3.4028235E+38 double Same as float in Arduino UNO string storing text, enclosed by \"\u2026\" Identifier (variable name) An identifier must start with either a letter (i.e., A to Z, and a to z), or the underscore symbol (i.e., _) The rest of the character may be letters (i.e., A to Z, and a to z), digits (i.e., 0 to 9), or The underscore symbol (i.e., _) Arduino is case-sensitive so radius, RADIUS, Radius, etc., are different A declaration specifies a type, and contains a list of one or more variables of that type Syntax: variable type variable name; variable type variable name1, variable name2, \u2026; Example: int distance, weight; String saysth; boolean win; A variable may be initialized in its declaration by using an equal sign followed by a value Example: int distance = 5, weight = 10; String saysth = \"Hello\" ; boolean win = true; A variable that has not been given a value is said to be uninitialized, and will contain some garbage value. Using uninitialized variables in computations will give unexpected results, and thus should be avoided. Here is an example regarding variables. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); String saysth = \"Hello\" ; int distance = 5 , weight = 10 ; Serial . println ( saysth ); Serial . println ( distance ); Serial . println ( weight ); } void loop () { } In addition to a sentence enclosed by \"\u2026\" in Serial.println(), variables can also place inside for output. It is very useful in debugging.","title":"Variables"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#section-check-box","text":"Variable type: boolean , int , long , float , double , String Identifier (variable name) Initialization of variables","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-01","text":"Variable type \u2013 char There is also a variable type called char which has not been introduced before. Try to find out yourself what is char and how to declare a variable of char . Try to print the word Hello in a line by using char .","title":"Try it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-02","text":"Constants Instead of variables, we may also want to assign a fixed value to an identifier and don\u2019t want to change its value anymore. Please search from the web to find out how to declare the variable as a constant, what is the use of it and what will happen if you change the value of the constant.","title":"Try it yourself 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#operators","text":"Sometimes we want to combine variables to product new values or solve mathematical formulas. This can be done in Arduino through operands and operators.","title":"Operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#operand","text":"Data on which the computation is performed May be variable or constant","title":"Operand"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#operator","text":"Specifies what is to be done on the operands Including arithmetic operators, relational operators, logical operators, increment and decrement operators, Assignment operators e.g. \u2014 radius + 2 x 3 radius, 2 & 3 are operands & x are opeartors","title":"Operator"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#arithmetic-operators","text":"Modulus operator produces the remainder e.g. 10 % 3 equals 1 Integer division will discard any fractional part e.g. 10 / 3 equals 3 Arthmetic Operators Sign in the expression Addition + Subtraction - Multiplication * Division / Modulus %","title":"Arithmetic operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-03","text":"Remainder We know that remainder is got from division of 2 integers. What will happen if we use the Modulus operators on the variable type double ? Please try to find it out.","title":"Try it yourself 03"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#relational-operators","text":"If the relation is true between 2 values (E.g. 15 > 8), the numeric value of the relation is 1, and 0 if the relation is false. Relational Operators Sign in the expression Greater than > Greater than or equal >= Smaller than < Smaller than or equal <= Equal == Not equal !=","title":"Relational operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-04","text":"Relations What are the outputs of the following programs? * Serial.println(19 >= 8); * Serial.println(\u201cstr\u201d == \u201cstr\u201d); * Serial.println(3.14*100 != 314);","title":"Try it yourself 04"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#logical-operators","text":"x && y is true if and only if both x and y are true x || y is true if either x or y is true !x is true if x is false originally, and is false if x is originally true Logical Operators Sign in the expression And && Or || Not !","title":"Logical operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-05","text":"How\u2019s your logic What are the outputs of the following programs? * Serial.println(5 > 6 || 5 >= 3); * Serial.println(5 + 6 && 5 / 6); * Serial.println(!18); * Serial.println(5 && 6 || 7 && 8);","title":"Try it yourself 05"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#increment-and-decrement-operators","text":"Increment operator ++ adds 1 to its operand i.e. sth++ is equivalent to sth=sth+1 ecrement operator -- subtracts 1 from its operand i.e. sth-- is equivalent to sth=sth-1 The operators ++ and -- may be used either as prefix (e.g., ++sth) or postfix (e.g., sth++) operators Assignment Operators Sign in the expression Increment ++ Decrement --","title":"Increment and decrement operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-06","text":"sth++ & ++sth As said above, sth++ has the same effect as ++sth. However, there is one point that is different between them, which sometimes leads to unexpected results in the program. Try to find out what is the difference. You can test it through the following program. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { int a = 5 , b = 6 ; Serial . println ( a ++ >= 6 ); a = 5 ; // reset the value of a Serial . println ( ++ a >= 6 ); }","title":"Try it yourself 06"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#assignment-operators","text":"Using = will assign the value on the R.H.S. to the variable in the L.H.S. a += 2 is equivalent to a = a + 2 , same as others Assignment Operators Sign in the expression Assignment = Addition += Subtraction -= Multiplication *= Division /=","title":"Assignment operators"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-07","text":"a *= 5 + 1 What is the value of a after the operation above? Assuming original value of a is 10. Is it equal to a=a*5 = 50 , then adding the 1 back? Or equals to a=a*(5+1) which is 60?","title":"Try it yourself 07"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#assign-a-name-to-a-pin","text":"Usually, we would like to give names to the pins we use in Arduino board to avoid confusion. In Lab 1, we have learnt to use the pin by typing the pin number directly. We can also give a name to the pin before we use it. There are mainly 3 methods of naming a pin and the naming should be placed before the setup() function. #define FIRST_PIN PA0 int SECOND_PIN = PA1 ; const int THIRD_PIN = PA2 ; void setup () { pinMode ( FIRST_PIN , OUTPUT ); pinMode ( SECOND_PIN , OUTPUT ); pinMode ( THIRD_PIN , OUTPUT ); } void loop () { } Can you figure out the differences among them? * Constants - C++ Tutorials * #define versus const dataType dataName [ - C++ Forum It is encouraged to named constants with UPPER_CASE_WITH_UNDERSCORES . Read Naming conventions for more details.","title":"Assign a name to a Pin"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#section-check-box_1","text":"Operand & Operator Arithmetic operators +, -, *, /, % Relational operators >, >=, <, <=, ==, != Logical operators &&, ||, ! Increment and decrement operators ++, -- Assignment operators =, +=, -=, *=, /= Naming a pin","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-08","text":"Precedence & Associativity In the exercise above, you should find out that what operator is carried out first will dictate the value. There are a list showing which operation has a higher priority. In evaluating an expression with mixed operators, those operators with a higher priority will be carried out before those with a lower priority. How about operations with the same priority? It is determined by the Associativity rule. Yet, the order of evaluation may be overridden by inserting parentheses () into the expressions. Operators Associativity Precedence ! Highest *, /, % left to right +, - left to right <, <=, >, >= left to right ==, != left to right && left to right || left to right =, +=, -=, *=, /=, %= right to left Lowest To ensure that you understand this, let\u2019s try to do some exercise. What is the value of the programs below? * 6 * 3 / 4 * 5 * 2 * ( 3 + 4 ) * 1 + 2 / 3 * 4 + 5","title":"Try it yourself 08"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#flow-of-control","text":"In programs, it is often necessary to alter the order in which statements are executed and determine whether a statement should be executed or not. The order in which statements are executed is often referred to as flow of control. Flow of control can be divided into branching and looping. Branching includes if-else statement and switch statement. Looping includes while statement and for statement.","title":"Flow of Control"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#if-else-statement","text":"if ( boolean_expression ) yes_statement ; else no_statement ; * Boolean expression is an expression in a programming language that produces a Boolean value when evaluated, i.e. one of true or false. * When an if-else statement is executed, the boolean_expression will be first evaluated * If it is true, yes_statement will be executed * If it is false, no_statement will be executed void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { int a = 5 ; if ( a > 2 ) Serial . println ( \"a is larger than 2\" ); else Serial . println ( \"a is not larger than 2\" ); }","title":"If-else statement"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#compound-statements","text":"It is possible to execute more than one statement in each branch of an if-else statement by using compound statements A compound statement is simply a list of statements enclosed within a pair of braces {} Here is an example in Arduino: void setup () { delay ( 1000 ); Serial . begin ( 9600 ); int a = 4 , b = 8 , c = 4 ; if ( a > 2 ) { Serial . println ( \"a is larger than 2\" ); b = - b - sqrt ( b * b - 4 * a * c ) / ( 2 * a ); Serial . println ( b ); Serial . println ( \"Peter is cool\" ); } else { Serial . println ( \"a is not larger than 2\" ); b = - b - sqrt ( b * b - 4 * a * c ) / ( 2 * a ); Serial . println ( b ); Serial . println ( \"Peter is an idiot\" ); } } void loop () { }","title":"Compound Statements"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-09","text":"If-else problem Consider the following program: void setup () { delay ( 1000 ); Serial . begin ( 9600 ); int a = 5 ; if ( a >= 5 ) { a -- ; Serial . println ( \"write sth\" ); } else { Serial . println ( \"write sth else\" ); } } void loop () { } As a>=5 originally, if statement will be executed, which is a-- . Now a is not larger than or equal to 5. Will the else statement be executed?","title":"Try it yourself 09"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-10","text":"Multi-way if-else Statement Sometimes we want to make several choices in one if-else statement. For example, if a<=5, then do something. If 5<a<8, do another thing. If a>=8, do other tasks. This can be done using \u201celse if\u201d statement. Find out more about it by yourself. Also, consider the following case: void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 6 , b = 1 ; boolean result ; if ( a > 3 ) result = true ; else if ( a % 2 == 0 ) b -- ; else result = false ; Serial . println ( result ); } void loop () { } As a > 3, if statement will be executed. Yet, else if statement is also satisfied in this case. Will the else if statement be executed? Try to find out the answer by yourself.","title":"Try it yourself 10"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#switch-statement","text":"A multi-way branching action can also be achieved using a switch statement switch ( controlling_variable ){ case value1 : statements ; break ; case value2 : statements ; break ; \u2026 default : default_statements ; } The value given after the case keywords are checked in order until the first that equals the value of the controlling variable is found, and then the following statement(s) are executed If none of the constants matches the value of the controlling variable, then the default statement(s) are executed The controlling variable in a switch statement must be an integer ( int ), boolean ( bool ), or a character ( char )","title":"Switch statement"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-11","text":"Multi-variables in controlling variable Sometimes, we want to determine the relation between 2 variables. Can we write a code like this? If not, how to fix it? void setup () { } void loop () { int a = 25 , b = 14 ; int result = 0 ; switch ( a * b ){ case ( a * b > 100 ) : result = 111 ; break ; case ( a % b == 0 ) : result = 101 ; break ; default : result = 100 ; } } You should notice that there is a statement break; after the statement of each case. Find out what is it and why the line after default statement do not need to add the break statement?","title":"Try it yourself 11"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#while-loop","text":"while ( boolean_expression ) { statement_1 ; statement_2 ; ... statement_n ; } * When a while statement (aka while loop) is executed, the boolean_expression is evaluated. * If it is true, the loop body is executed once (i.e., one iteration) * If it is false, the loop ends without executing its body * After each iteration, the boolean_expression will be evaluated again and the process repeats. * While loop is used when we want to repeat some statements again and again as long as the specified condition is true. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 5 ; while ( a < 10 ) { Serial . println ( a ); a ++ ; } } void loop () { } As long as a < 10, the value of a will be printed.","title":"while loop"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-12","text":"Recursion using while Write a program that prints the first 100 odd numbers starting from 1. Write a program that prints the first 20 square numbers.","title":"Try it yourself 12"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#for-loop","text":"We will usually want to end the loop after several iterations or after a specific condition. Apart from counting the iterations in while loop, we can also use for loop which is more convenient to use. for ( initialization ; condition ; updating ) { statement_1 ; statement_2 ; ... statement_n ; } When a for loop is executed * The initialization is performed to set the initial value of the loop variable * The initialization is executed only once * The condition is checked * If it is true, the loop body is executed once (i.e. one iteration) * If it is false, the loop ends without executing its body * After each iteration, the updating of loop variable is performed and the condition is checked again to determine whether a new iteration starts void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 5 ; for ( int i = 0 ; i < 20 ; i ++ ) { a *= 2 ; } Serial . println ( a ); } void loop () { } In the program above, the value of a will be doubled for 20 times. It will end when the value of i reaches 20.","title":"For loop"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-13","text":"Recursion using for Write a program that calculates the sum of odd numbers between 1 and 20 Write a program to find those numbers which are divisible by 7 and multiple of 5, between 1500 and 2700 (both included).","title":"Try it yourself 13"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#loop-inside-a-loop","text":"Sometimes, we many want to perform iterations inside a loop. It is allowed in Arduino, just like the program below. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int a = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 10 ; j > 0 ; j -- ) { a += i + j ; } } Serial . println ( a ); } void loop () { }","title":"Loop inside a loop"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-14","text":"Recursion using for (2) Write a program to construct the following pattern, using a nested for-loop. * * * * * * * * * * * * * * * * * * * * * * * * * Write a program to print the Fibonacci Sequence starting from 1 till the maximum value smaller than 1000.","title":"Try it yourself 14"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#section-check-box_2","text":"if-else statement switch statement while statement for statement","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-15","text":"break & continue We may want to exit a loop or start a new iteration immediately without executing the remaining statements in the loop in some situations. This can be done by using break and continue . Try to find out how to use them and what is the difference between them. Write the following program using break and continue . * Print the first 50 even numbers using continue * Initiate a to be 5. Add 1, then 2\u2026 until the value of a exceed 1000 by using break .","title":"Try it yourself 15"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#scope-of-variables-global-variables","text":"The scope of a variable is the portion of a program in which the variable can be used. A variable cannot be used beyond its scope. * The scope of a local variable starts from its declaration up to the end of the block (delimited by a pair of braces { }). * Variables can be declared with the same identifier as long as they have different scopes. Variables in an inner block will hide any identically named variables in outer blocks. However, this is confusing and should be avoided. Global variable is a variable declared outside all functions. Local variable is a variable declared within a function. * Global variables can be accessed by all functions. * Global variables remain in existence permanently. * Global variables should be avoided in ordinary programming as they can be changed by several functionsare and hence very hard to trace. However, it is inevitable in Arduino as it is the only way to store states across loop(). * It is encouraged to named a global variables with under_scored and a leading g_ added, e.g. g_my_variable . Read Naming conventions for more details.","title":"Scope of variables &amp; global variables"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-16","text":"What's the output of the program? Why it behave like that? int first_int = 1 , second_int = 1 ; // Global variables void setup () { delay ( 1500 ); Serial . begin ( 9600 ); { int first_int = 2 ; // Local variable in a inner block second_int = 2 ; Serial . print ( \"inside a block: \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); } int first_int = 3 ; // Local variable second_int = 3 ; Serial . print ( \"inside setup(): \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); } void loop () { Serial . print ( \"outside setup(): \" ); Serial . print ( first_int ); Serial . print ( \" \" ); Serial . println ( second_int ); delay ( 10000 ); }","title":"Try it yourself 16"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#array","text":"Array a collection of data of the same type. Similar to list in Python but with a fixed size. * Syntax: dateType identifier[array_size]; e.g. int my_int_array[5]; * Array can be initialized in its declaration by using an equal sign followed by a list of values enclosed within a pair of braces. e.g. int my_int_array[5] = {1, 2, 3, 4, 5}; * Each element of an array can be regarded as a variable of the base type, which can be accessed through identifier[index] . e.g. my_int_array[0] = 100; , Serial.println(my_int_array[1]); * Array indexes always start from 0 and end with the integer that is one less than the size of the array. . NEVER * access beyond the size of the array. e.g. if the size of my_int_array is 5, reading or writing my_int_array[5] and beyond has a unpredictable behaviour. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int int_list [ 5 ] = { 1 , 3 , 5 , 7 , 9 }; for ( int i = 0 ; i < 5 ; i ++ ) Serial . println ( int_list [ i ]); int_list [ 0 ] = 2 ; int_list [ 4 ] = 11 ; for ( int i = 0 ; i < 5 ; i ++ ) Serial . println ( int_list [ i ]); } void loop () { }","title":"Array"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-17","text":"Initialize a char array with Hello, World! as its content and print it. Note: A char array is also called a \"C-style string\", as there's no String in C. Read and print serial input using a C-style string. Note: serial input (and generally every C-style string) end with a '\\0'. void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } void loop () { char input_string [ 20 ]; int input_string_idx = 0 ; while ( Serial . available () == 0 ); while ( Serial . available () > 0 ) { input_string [ input_string_idx ] = Serial . read (); input_string_idx ++ ; if ( input_string_idx >= 20 ) break ; } for ( int i = 0 ; i < 20 ; i ++ ){ if ( input_string [ i ] == '\\0' ) break ; Serial . print ( input_string [ i ]); } Serial . println (); }","title":"Try it yourself 17"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#2d-array","text":"It is possible to have an array of array (a.k.a. 2D array). void setup () { delay ( 1500 ); Serial . begin ( 9600 ); int always_equal_15 [ 3 ][ 3 ] = {{ 2 , 7 , 6 },{ 9 , 5 , 1 },{ 4 , 3 , 8 }}; for ( int i = 0 ; i < 3 ; i ++ ){ for ( int j = 0 ; j < 3 ; j ++ ){ Serial . print ( always_equal_15 [ i ][ j ]); Serial . print ( ' ' ); } Serial . println (); } } void loop () { }","title":"2D Array"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-18","text":"Try to flip always_equal_15 over its diagonal when printing it out.","title":"Try it yourself 18"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#functions","text":"In Arduino, sub-tasks can be implemented as functions. A function is a group of statements that is executed when it is called from some point in program. A program is composed of a collection of functions. When a program is put into execution, it always starts at the setup function and loop function, which may in turn call other functions. Check out the following code: int my_function ( int my_arg ) { if ( my_arg >= 0 ) { return my_arg ; } else { return 0 ; } } void setup () { delay ( 1500 ); Serial . begin ( 9600 ); } int a = 5 ; void loop () { Serial . println ( my_function ( a )); a -- ; delay ( 1000 ); } Function appears in the following form: return_type function_name ( type1 parameter1 , type2 parameter2 , ... ) { // variable declarations ... // executable statements ... } In the above code, \u201cmy_function\u201d is a function. It has return type \u201cint\u201d, one parameter which is \u201cmy_arg\u201d, \u201cmy_arg\u201d has a variable type \u201cint\u201d. Function Call A function call (i.e., the process of calling a function) is made using the function name with the necessary parameters. A function call is itself an expression, and can be put in any places where an expression is expected. The statement: function(a) is a function call. return The value returned by the function is determined when the function executes a return statement A return statement consists of the keyword return followed by an expression When a return statement is executed the function call ends Thus, in the above code, if a>100, then the return statement is executed. Parameters and Arguments Parameters are variables that are part of the function definition The expressions used to pass values to a function during a function call are referred to as arguments When a function is called the computer substitutes the first argument with the first parameter, the second argument with the second parameter, and so forth The arguments used in a function call can be constants, variables, expressions, or even function calls In above code, \u201cmy_arg\u201d is the parameter and \u201cint\u201d is its type. Thus, digitalWrite(pin,value), pinMode(pin, value) etc. are all functions, though the function itself is hidden from you. void Functions In some situations, a function returns no value In this case, we use the void type specifier A function with no return value is called a void function The return statement in a void function does not specify any return value. It is used to return the control to the calling function If a return statement is missing in a void function, the control will be returned to the calling function after the execution of the last statement in the function Read more from Function Declaration - Arduino","title":"Functions"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#section-check-box_3","text":"function function call return parameter void","title":"Section Check Box:"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#try-it-yourself-19","text":"Functions Try to write a function that can calculate addition, subtraction, multiplication and division at once. double calculator ( double a , char sign , double b ){ // write you code here... } void setup () { Serial . begin ( 9600 ); Serial . println ( calculator ( 3.14 , '+' , 3.14 )); // 6.28 Serial . println ( calculator ( 3.14 , '-' , 3.14 )); // 0 Serial . println ( calculator ( 6 , '*' , 7 )); // 42 Serial . println ( calculator ( 1 , '/' , 0 )); // what will happen? } void loop () { } What is the problem of the following code? Can you correct it? void setup () { Serial . begin ( 9600 ); double a = 15.1 ; func ( a ); } double func ( int val ){ return a * 13.1 ; } void loop () { }","title":"Try it yourself 19"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Learning-basic-programming-with-Arduino%29/#see-also","text":"Arduino Tutorials (Index) Arduino Tutorials (Learning basic control)","title":"See Also"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/","text":"Next Tutorial: Learning basic control Objectives At the end of this self-learning lab, you should be able to: * Understand Timer * Use PWM * Use External Interrupt * Use Timer Interrupt Things you need STM32 development board (Blue Pill) Solderless breadboard LED A resistor, anything between a few hundred to a few thousand ohms is OK. Check the resistance with a multimeter or by reading the color code on it. Momentary button Hookup wire (or Dubon wires as we like to call them) Timer STM32 has hardware timers, each consist of a counter and several registers to control the behaviour of the counter. The counter increments from 0 to its maximum, and then back to 0 again. (In upcounting mode. There are also downcounting and center-aligned mode, which behave similarly) PWM PWM is the abbreviation of Pulse Width Modulation. There are 2 major functions: * The length of the pulse width can be used to encoded data. Servo motor (which will be mentioned later) uses PWM to acquire the desire position. * PWM wave can be used to control the power delivered to a desired value. In the example below, the brightness of an LED can be adjusted even though only 3.3V and 0V is delivered from Blue Pill. Also, for a circuit with sufficient inductance, average analog waveform at the approximate desired voltage level can be recovered. L298N motor driver (which will be mentioned later) is an example. In STM32, PWM waves are generated with timers. The output pin is set to HIGH only when the conuter of the timer is lower then a preset value. To use PWM control in Arduino, we may need to use analogWrite(). Here we will use a LED to demostrate. Select one of the PWM pins (you may check the pinout ). Connect the circuit as below: Click File \u2192 Examples \u2192 03.Analog \u2192 Fading . Change the value of ledPin to the pin you've connected the LED. You should see a breathing LED light. Section Check Box: * What is PWM * Using analogWrite() Further Reading PWM - Arduino analogWrite() - Arduino analogWrite() - Maple v0.0.12 Documentation Tutorial 10: Fade an LED with Pulse Width Modulation using analogWrite() - Programming Electronics Academy Try it yourself 01 pwmWrite() pwmWrite() is a function only available to STM32 but not genuine Arduino, which offers 16-bit PWM resolution. Make a breathing LED light the same as above using pwmWrite(). Notice that pin mode needed to be changed from OUTPUT to PWM in order to use pwmWrite(). The following sites may help you: * PWM - Maple v0.0.12 Documentation * Easy & Powerful Arduino Alternative? STM32 Beginner's Guide - Youtube External Interrupt You may have heard of interrupt service routine (ISR), which is a piece of code triggered by a interrupt signal. All digital pins on STM32 can be used to connect to external interrupt signal. (Unlike genuine Arduino, which has 2 - 6 pins available only) Connect a button just like what you have did in Getting Started with Arduino IDE . Run the following code: const int BTN_PIN = PB9 ; bool g_state = false ; void handler ( void ); void setup () { pinMode ( LED_BUILTIN , OUTPUT ); pinMode ( BTN_PIN , INPUT_PULLDOWN ); attachInterrupt ( BTN_PIN , handler , RISING ); } void loop () { } void handler (){ g_state = ! g_state ; digitalWrite ( LED_BUILTIN , g_state ); } Here handler() is called once the button is pressed. Further Reading attachInterrupt() - Arduino Reference External Interrupts - Maple v0.0.12 Documentation Try it yourself 02 Control a breathing light Make a breathing light that turns on only when the button is pressed. Make use of external interrupt. Timer Interrupt It is possible to generate interrupt signals using a timer. The function can be executed at a regular time intervals. This is especially useful in real-time control. Here we will be using the PC13 LED as an example: const int LED_PIN = PC13 ; const int LED_RATE = 500000 ; // in microseconds; therefore the interrupt handler will be called every 0.5s void handler_led ( void ); int g_state = 0 ; void setup () { pinMode ( LED_PIN , OUTPUT ); // Setup LED Timer // In output compare mode, timer counts from 0 to its reload value repeatedly; every time the counter value reaches one of the channel compare values, the corresponding interrupt is fired. Timer1 . setMode ( TIMER_CH1 , TIMER_OUTPUTCOMPARE ); Timer1 . setPeriod ( LED_RATE ); // in microseconds Timer1 . attachInterrupt ( TIMER_CH1 , handler_led ); // handler_led() is the interrupt handler } void loop () { } void handler_led () { g_state = ! g_state ; digitalWrite ( LED_PIN , g_state ); } Here handler_led() is called every 0.5s. The LED should be blinking at 1 Hz. Further Readings HardwareTimer - Maple v0.0.12 Documentation TimerPWMCheatsheet - Arduino Palygrou , which is an example code that manipulate timer counter registers such as TCCR2A, TCCR2B, OCR2A and OCR2B. Unfortunately, it only works on AVR MCUs. For STM32, it has a different system to control timers. Controlling STM32 Hardware Timers with Interrupts | VisualGDB Tutorials Assignment 01 Control a breathing light Mk-II Make a breathing light that can be toggled by a button or a command from serial input. Use timer interrupt to adjust the brightness of the LED, and use external interrupt read the state of the button. You may check the maple documentation and see how to use pause() and resume() . Reference PWM Pulse-Width Modulation (PWM) - \u6210\u5927\u8cc7\u5de5 Wiki Using STM32 timers in PWM mode | VisualGDB Tutorials External Interrupt \u5f9e Arduino \u5230 AVR \u6676\u7247(2) -- Interrupts \u4e2d\u65b7\u8655\u7406 - \u7a0b\u5f0f\u4eba\u96dc\u8a8c , which is specfic to AVR MCUs and hence can be used on genuine Arduino only. Timer Interrupt Arduino_STM32/TimerInterrupts.ino at master \u00b7 rogerclarkmelbourne/Arduino_STM32 Further Reading Secrets of Arduino PWM - Ken Shirriff's blog , for genuine Arduino only General-purpose timer cookbook - STElectronics See Also Arduino Tutorials (Index) Learning basic control","title":"Arduino Tutorials (Timer, PWM and Interrupts)"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#objectives","text":"At the end of this self-learning lab, you should be able to: * Understand Timer * Use PWM * Use External Interrupt * Use Timer Interrupt","title":"Objectives"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#things-you-need","text":"STM32 development board (Blue Pill) Solderless breadboard LED A resistor, anything between a few hundred to a few thousand ohms is OK. Check the resistance with a multimeter or by reading the color code on it. Momentary button Hookup wire (or Dubon wires as we like to call them)","title":"Things you need"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#timer","text":"STM32 has hardware timers, each consist of a counter and several registers to control the behaviour of the counter. The counter increments from 0 to its maximum, and then back to 0 again. (In upcounting mode. There are also downcounting and center-aligned mode, which behave similarly)","title":"Timer"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#pwm","text":"PWM is the abbreviation of Pulse Width Modulation. There are 2 major functions: * The length of the pulse width can be used to encoded data. Servo motor (which will be mentioned later) uses PWM to acquire the desire position. * PWM wave can be used to control the power delivered to a desired value. In the example below, the brightness of an LED can be adjusted even though only 3.3V and 0V is delivered from Blue Pill. Also, for a circuit with sufficient inductance, average analog waveform at the approximate desired voltage level can be recovered. L298N motor driver (which will be mentioned later) is an example. In STM32, PWM waves are generated with timers. The output pin is set to HIGH only when the conuter of the timer is lower then a preset value. To use PWM control in Arduino, we may need to use analogWrite(). Here we will use a LED to demostrate. Select one of the PWM pins (you may check the pinout ). Connect the circuit as below: Click File \u2192 Examples \u2192 03.Analog \u2192 Fading . Change the value of ledPin to the pin you've connected the LED. You should see a breathing LED light. Section Check Box: * What is PWM * Using analogWrite()","title":"PWM"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#further-reading","text":"PWM - Arduino analogWrite() - Arduino analogWrite() - Maple v0.0.12 Documentation Tutorial 10: Fade an LED with Pulse Width Modulation using analogWrite() - Programming Electronics Academy","title":"Further Reading"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#try-it-yourself-01","text":"pwmWrite() pwmWrite() is a function only available to STM32 but not genuine Arduino, which offers 16-bit PWM resolution. Make a breathing LED light the same as above using pwmWrite(). Notice that pin mode needed to be changed from OUTPUT to PWM in order to use pwmWrite(). The following sites may help you: * PWM - Maple v0.0.12 Documentation * Easy & Powerful Arduino Alternative? STM32 Beginner's Guide - Youtube","title":"Try it yourself 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#external-interrupt","text":"You may have heard of interrupt service routine (ISR), which is a piece of code triggered by a interrupt signal. All digital pins on STM32 can be used to connect to external interrupt signal. (Unlike genuine Arduino, which has 2 - 6 pins available only) Connect a button just like what you have did in Getting Started with Arduino IDE . Run the following code: const int BTN_PIN = PB9 ; bool g_state = false ; void handler ( void ); void setup () { pinMode ( LED_BUILTIN , OUTPUT ); pinMode ( BTN_PIN , INPUT_PULLDOWN ); attachInterrupt ( BTN_PIN , handler , RISING ); } void loop () { } void handler (){ g_state = ! g_state ; digitalWrite ( LED_BUILTIN , g_state ); } Here handler() is called once the button is pressed.","title":"External Interrupt"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#further-reading_1","text":"attachInterrupt() - Arduino Reference External Interrupts - Maple v0.0.12 Documentation","title":"Further Reading"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#try-it-yourself-02","text":"Control a breathing light Make a breathing light that turns on only when the button is pressed. Make use of external interrupt.","title":"Try it yourself 02"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#timer-interrupt","text":"It is possible to generate interrupt signals using a timer. The function can be executed at a regular time intervals. This is especially useful in real-time control. Here we will be using the PC13 LED as an example: const int LED_PIN = PC13 ; const int LED_RATE = 500000 ; // in microseconds; therefore the interrupt handler will be called every 0.5s void handler_led ( void ); int g_state = 0 ; void setup () { pinMode ( LED_PIN , OUTPUT ); // Setup LED Timer // In output compare mode, timer counts from 0 to its reload value repeatedly; every time the counter value reaches one of the channel compare values, the corresponding interrupt is fired. Timer1 . setMode ( TIMER_CH1 , TIMER_OUTPUTCOMPARE ); Timer1 . setPeriod ( LED_RATE ); // in microseconds Timer1 . attachInterrupt ( TIMER_CH1 , handler_led ); // handler_led() is the interrupt handler } void loop () { } void handler_led () { g_state = ! g_state ; digitalWrite ( LED_PIN , g_state ); } Here handler_led() is called every 0.5s. The LED should be blinking at 1 Hz.","title":"Timer Interrupt"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#further-readings","text":"HardwareTimer - Maple v0.0.12 Documentation TimerPWMCheatsheet - Arduino Palygrou , which is an example code that manipulate timer counter registers such as TCCR2A, TCCR2B, OCR2A and OCR2B. Unfortunately, it only works on AVR MCUs. For STM32, it has a different system to control timers. Controlling STM32 Hardware Timers with Interrupts | VisualGDB Tutorials","title":"Further Readings"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#assignment-01","text":"Control a breathing light Mk-II Make a breathing light that can be toggled by a button or a command from serial input. Use timer interrupt to adjust the brightness of the LED, and use external interrupt read the state of the button. You may check the maple documentation and see how to use pause() and resume() .","title":"Assignment 01"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#reference","text":"","title":"Reference"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#pwm_1","text":"Pulse-Width Modulation (PWM) - \u6210\u5927\u8cc7\u5de5 Wiki Using STM32 timers in PWM mode | VisualGDB Tutorials","title":"PWM"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#external-interrupt_1","text":"\u5f9e Arduino \u5230 AVR \u6676\u7247(2) -- Interrupts \u4e2d\u65b7\u8655\u7406 - \u7a0b\u5f0f\u4eba\u96dc\u8a8c , which is specfic to AVR MCUs and hence can be used on genuine Arduino only.","title":"External Interrupt"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#timer-interrupt_1","text":"Arduino_STM32/TimerInterrupts.ino at master \u00b7 rogerclarkmelbourne/Arduino_STM32","title":"Timer Interrupt"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#further-reading_2","text":"Secrets of Arduino PWM - Ken Shirriff's blog , for genuine Arduino only General-purpose timer cookbook - STElectronics","title":"Further Reading"},{"location":"Electronics%20team/Arduino%20Tutorials/Arduino-Tutorials-%28Timer%2C-PWM-and-Interrupts%29/#see-also","text":"Arduino Tutorials (Index) Learning basic control","title":"See Also"}]}